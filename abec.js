"use strict";


// defn :: (main constants) : useful for if another script overwrites something
// ----------------------------------------------------------------------------------------------------------------------------
    const MAIN = globalThis; // context
    const VOID = (function(){}()); // undefined
    const NULL = null; // syntax sugar
    const TRUE = (!0);
    const FALS = (!1);
// ----------------------------------------------------------------------------------------------------------------------------




// func :: bake : define immutable property .. shorhand for Object.defineProperty and all required constituents
// ----------------------------------------------------------------------------------------------------------------------------
    const bake = function bake(p,v,x,s)
    {
        if(((typeof p)==="function")&&(v===VOID)){if(!p.name){return}; v=p; p=v.name}; // named function
        if(!x){x=MAIN}; // if no context is given then MAIN is assumed
        if(((typeof p)!="string")){return}; if(!x.hasOwnProperty){return}; // validation
        if(v===VOID){v=x[p]; if(v===VOID){return}}; // value is already in context, or undefined
        if(s){Object.defineProperty(x,p,{value:v})} // soft .. not bake -but saves duplication
        else{Object.defineProperty(x,p,{writable:false,enumerable:false,configurable:false,value:v})}; // harden, or fail
        return v; // all is well
    };

    bake(bake); // harden unbaked
    bake("MAIN",MAIN); bake("VOID",VOID); bake("NULL",NULL); bake("TRUE",TRUE); bake("FALS",FALS);
// ----------------------------------------------------------------------------------------------------------------------------




// func :: hard/soft : define something in another context (e.g global) -from within any other context .. immutable -or mutable
// ----------------------------------------------------------------------------------------------------------------------------
    bake(function hard(p,v,x){return bake(p,v,x)});   // syntax sugar for bake hard .. immutable
    bake(function soft(p,v,x){return bake(p,v,x,1)}); // syntax sugar for bake soft .. mutable
// ----------------------------------------------------------------------------------------------------------------------------




// func :: defn : define immutable globals .. syntax sugar .. returns true if all went well
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function defn(o)
    {
        let t,f; t=(typeof o); f=0; // t:type .. f:fail

        if(t=="string")
        {
            let l=o.trim(); if(!l){return}; // validation
            l.split(" ").forEach((i)=>{i=i.trim(); if(!i){f++;return}; bake(i,`:${i}:`)});
            return (f?(!1):(!0)); // if all defined then return true, else false
        };

        if(t=="object")
        {
            if(Object.keys(o).length<1){return}; // validation
            for(let k in o)
            {
                if(((typeof k)!="string")||(k.length<1)||!o.hasOwnProperty(k)){f++;continue}; // validation
                bake(k,o[k]);
            };
            return (f?(!1):(!0)); // if all defined then return true, else false
        };

        // .. or return undefined
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: (dump/moan) : console.log & console.error shorthands
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function dump(){console.log.apply(console,([].slice.call(arguments)))});
    hard(function moan(m)
    {
        let a=([].slice.call(arguments)); if(isKnob(m)){m=text(m); a[0]=m};
        a.unshift("\x1b[31m%s\x1b[0m"); console.error.apply(console,a);
    });
// ----------------------------------------------------------------------------------------------------------------------------




// defn :: (global constants) : to use everywhere .. mostly for shorthand .. syntax-sugar
// ----------------------------------------------------------------------------------------------------------------------------
    defn("A B C D E F G H I J K L M N O P Q R S T U V W X Y Z");
    defn("OK NA TL TM TR RT RM RB BR BM BL LB LM LT MM");
    defn("ANY ALL");
    defn("INIT AUTO COOL DARK LITE INFO GOOD NEED WARN FAIL NEXT SKIP STOP DONE ACTV NONE BUSY KEYS VALS ONCE EVRY BFOR AFTR");
    defn("UNTL EVNT FILL TILE SPAN OPEN SHUT SELF VERT HORZ DEEP OKAY DUMP");
    defn("CLIENT SERVER SILENT UNIQUE COPIES FORCED EXCEPT");

    defn
    ({
        CRUDREFS:`count fetch using alter write claim touch where group order limit parse shape apply erase purge debug dbase
        table field sproc funct after basis named param parts yield`,

        DIRINDEX:`aard.html aard.htm aard.js aard.md index.html index.htm index.js index.md README.md`,
    });
// ----------------------------------------------------------------------------------------------------------------------------
// 10,000 max



// defn :: ENVITYPE : string reference as the type of environment this script is running in
// ----------------------------------------------------------------------------------------------------------------------------
    defn({ENVITYPE:(function()
    {
        if(((typeof window)!="undefined")&&((typeof __dirname)!="string")){return "web"};
        if(((typeof browser)!="undefined")&&!!browser.browserAction&&((typeof browser.browserAction.getPopup)=="function"))
        {return "ext"}; return "njs";
    }())});

    defn({CLIENTSIDE:(ENVITYPE!="njs"), SERVERSIDE:(ENVITYPE=="njs")});

    defn({WEB:((ENVITYPE=="web")?"web":""), EXT:((ENVITYPE=="ext")?"ext":""), NJS:((ENVITYPE=="njs")?"njs":"")});
// ----------------------------------------------------------------------------------------------------------------------------




// func :: runsAt : to use when expected to run at CLIENT or SERVER
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function runsAt(w)
    {
        if((w!=CLIENT)&&(w!=SERVER)){return}; let m=`only available at ${w}`; // validation
        if((w==CLIENT)&&(ENVITYPE=="njs")){fail(m); return FALS};
        if((w==SERVER)&&(ENVITYPE!="njs")){fail(m); return FALS};
        return TRUE;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// defn :: PROTOCOL : string reference as the URL-schema of the environment this script is running in
// ----------------------------------------------------------------------------------------------------------------------------
    defn({PROTOCOL:(function()
    {
        if(ENVITYPE=="web"){return (location.protocol+"").split(":").join("")};
        if(ENVITYPE=="njs"){return "file"};
        return "webext";
    }())});
// ----------------------------------------------------------------------------------------------------------------------------




// defn :: HOSTNAME : string reference as the name of the machine this script is running in
// ----------------------------------------------------------------------------------------------------------------------------
    defn({HOSTNAME:(function()
    {
        if(ENVITYPE=="web"){return location.hostname};
        if(ENVITYPE=="njs"){let os,hn; os=require("os"); hn=os.hostname(); os=VOID; return hn};
        return ":webext:";
    }())});
// ----------------------------------------------------------------------------------------------------------------------------




// defn :: HOSTPURL : string reference as a path-URL of the host running this script
// ----------------------------------------------------------------------------------------------------------------------------
    defn({HOSTPURL:(function()
    {
        if(ENVITYPE=="web"){return (PROTOCOL+"://"+HOSTNAME)};
        if(ENVITYPE=="njs"){return process.cwd()};
        return "webext";
    }())});
// ----------------------------------------------------------------------------------------------------------------------------




// func :: span : length of anything .. spanIs -to verify/assert span
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function span(d,x)
    {
        if((d===NULL)||(d===VOID)||(!d&&isNaN(d))){return 0};  if(!isNaN(d)){d=(d+"")};
        if(x&&((typeof x)=="string")&&((typeof d)=="string")){d=(d.split(x).length-1); return d};
        let s=d.length; if(!isNaN(s)){return s;};
        try{s=Object.getOwnPropertyNames(d).length; return s;}
        catch(e){return 0;}
    });

    hard(function spanIs(d,g,l){let s=(((typeof d)=='number')?d:span(d)); g=(g||0); l=(l||s); return ((s>=g)&&(s<=l))});
// ----------------------------------------------------------------------------------------------------------------------------



// shiv :: (types) : shorthands to identify variables .. g & l is "greater-than" & "less-than" -which counts items inside v
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function isVoid(v){return ((v===VOID)||(v===null))});
    hard(function isBool(v){return ((v===TRUE)||(v===FALS))});
    hard(function isBare(v)
    {
        let w=what(v); if(w=="func"){v=v.parted(); return (span(v.body)<1)};
        return (isin("text,list,knob",w)?(span(v)<1):VOID);
    });

    hard(function isNumr(v,g,l){if(!((typeof v)==='number')||isNaN(v)){return FALS}; return (isVoid(g)||spanIs(v,g,l))});
    hard(function isFrac(v,g,l){if(!(isNumr(v)&&((v+'').indexOf('.')>0))){return FALS}; return (isVoid(g)||spanIs(v,g,l))});
    hard(function isInum(v,g,l){if(!isNumr(v)||isFrac(v)){return FALS}; return (isVoid(g)||spanIs(v,g,l))});

    hard(function isText(v,g,l){if(!((typeof v)==='string')){return FALS}; return (isVoid(g)||spanIs(v,g,l))});
    hard(function isWord(v,g,l){if(!test(trim(v,'_'),/^([a-zA-Z])([a-zA-Z0-9_]{1,35})+$/)){return}; return (isVoid(g)||spanIs(v,g,l))});
    hard(function isJson(v,g,l){return (isin(['[]','{}','""'],wrapOf(v))?TRUE:FALS);});
    hard(function isPath(v,g,l){if(!test(v,/^([a-zA-Z0-9-\/\._@~$]){1,432}$/)){return FALS}; return (((v[0]=='/')||(v[0]=='.'))&&(isVoid(g)||spanIs(v,g,l)))});
    hard(function isDurl(v,g,l){return (isText(v)&&(v.indexOf('data:')===0)&&(v.indexOf(';base64,')>0));});
    hard(function isPurl(v,g,l)
    {
        if(!isText(v)){return FALS}; let t=v.split("?")[0].split("://")[1]; if(!t){return FALS};
        return (isVoid(g)||spanIs(v,g,l));
    });

    hard(function isList(v,g,l)
    {
        let t=Object.prototype.toString.call(v).toLowerCase();
        if((t.indexOf('arra')<0)&&(t.indexOf('argu')<0)&&(t.indexOf('list')<0)&&(t.indexOf('coll')<0)){return FALS};
        return (isVoid(g)||spanIs(v,g,l))
    });

    hard(function isData(v,g,l)
    {
        if(!isList(v)||!isKnob(v[0])){return FALS};
        let frk,lrk; frk=keys(v[0]).join(""); lrk=keys(v[(v.length-1)]).join("");
        if((frk.length<1)||(frk!==lrk)){return FALS};
        return (isVoid(g)||spanIs(v,g,l))
    });

    hard(function isKnob(v,g,l) // KNOB = Key-Notation OBject
    {if(((typeof v)!='object')||isList(v)){return FALS}; return (isVoid(g)||spanIs(v,g,l))});

    hard(function isFunc(v,g,l){if(!((typeof v)==='function')){return FALS}; return TRUE});

    hard(function isNode(v,g,l)
    {
        if(isVoid(v)||((typeof v)!='object')){return FALS}; if((typeof v.getBoundingClientRect)!='function'){return FALS};
        return (isVoid(g)||spanIs(v.childNodes.length,g,l));
    });

    hard(function isTemp(v){return (v instanceof DocumentFragment)});

    hard(function isFold(v,g,l)
    {
        if(CLIENTSIDE){return}; // ?
        if(!isPath(v)){return}; if(!disk.exists(v)){return};
        let r=disk.stat(v).isDirectory(); if(!r||!g){return r};
        r=disk.readdir(v); return spanIs(r,g,l);
    });

    hard(function isFile(v,g,l)
    {
        if(CLIENTSIDE){return}; // ?
        if(!isPath(v)){return}; if(!disk.exists(v)){return};
        let r=disk.stat(v); if(!r.isFile()){return}; r=r.size;
        if(!g){return r}; return spanIs(r,g,l);
    });

    hard(function isDeep(a,g,l)
    {
        let r=FALS; if(isText(a))
        {
            if(!expect.path(a)){return}; if(CLIENTSIDE){fail("context :: isDeep(path) only works server-side"); return};
            if(!isFold(a)){return FALS}; a=disk.scandir(a);
        };

        if(!isFunc(a.forEach)){return FALS}; // must be enumerable object/array
        a.forEach((v)=>{if(isin("list,knob,func",what(v))){r=TRUE}});
        return r;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shiv :: (trim) : trim either white-space or substring from begin -and/or end of string
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function ltrim(t,c)
    {
        if(!isText(t,1)){return t}; if(c===VOID){return t.replace(/^\s+/g,'')};
        if(isNumr(c)){c=(c+'')}; if(!isText(c)){return t}; let s=c.length; while(t.indexOf(c)===0){t=t.slice(s);}; return t;
    });

    hard(function rtrim(t,c)
    {
        if(!isText(t,1)){return t}; if(c===VOID){return t.replace(/\s+$/g,'')};
        if(isNumr(c)){c=(c+'')}; if(!isText(c)){return t}; let s=c.length;
        while(t.slice((0-s))==c){t=t.slice(0,(t.length-s));};
        return t;
    });

    hard(function trim(t,b,e)
    {
        if(!isText(t,1)){return t}; if((b===VOID)&&(e===VOID)){return t.trim();}; if(isNumr(b)){b=(b+'')};
        if(e===VOID){e=b}else if(isNumr(e)){e=(b+'')}; if(b===e){t=rtrim(ltrim(t,b),e); return t;};
        if(b&&!e){return ltrim(t,b)}; if(e&&!b){return rtrim(t,e)}; return t;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: part : split once on first occurance of delimeter
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function part(t,a)
    {
        var c,i,b,e,s; c=isin(t,a); if(!c){return};
        s=c.length; i=t.indexOf(c);  b=((i>0)?t.slice(0,i):'');  e=(t[(i+s)]?t.slice((i+s)):'');  return [b,c,e];
    });

    hard(function rpart(t,a)
    {
        var c,i,b,e,a,s;  c=isin(t,a); if(!c){return};
        s=c.length; i=t.lastIndexOf(c); b=((i>0)?t.slice(0,i):''); e=(t[(i+s)]?t.slice((i+s)):'');  return [b,c,e];
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: diff : get the difference between 2 of anything
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function diff(a1,a2)
    {
        let t1,t2,tv; t1=what(a1); t2=what(a2);
        if((span(a1)<1)||(span(a2)<1)||(t1!==t2)){return};

        if(t1 == "numr"){return ((a1>a2)?(a1-a2):(a2-a1))} // returns number
        else if(t1 == "text"){a1=a1.split(a2); a2=a2.split(a1)} // returns list
        else if(t1 == "knob"){a1=keys(a1); a2=keys(a2)} // returns list
        else if(t1 == "func"){a1=a1.parted().body; a2=a2.parted().body} // returns list
        else if(t1 != "list"){moan("cannot get the diff of `"+t1+"`")}; // add more options above this line

        if(!isList(a1)){return [VOID]}; // expected to return list but method to convert to list is undefined above
        return a1.filter((i)=>{return (a2.indexOf(i)<0)});
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shiv :: (case) : set -and test text-case
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function lowerCase(v){if(!isText(v,1)){return v}; return v.toLowerCase()});
    hard(function upperCase(v){if(!isText(v,1)){return v}; return v.toUpperCase()});
    hard(function proprCase(v){if(!isText(v,1)){return v}; return (v[0].toUpperCase()+(v[1]?v.substring(1).toLowerCase():''))});
    hard(function camelCase(v,camlBack)
    {
        if(!isText(v,1)){return v}; v=v.toLowerCase().split(' ').join('-'); let r='';
        v.split('-').forEach((i)=>{r+=proprCase(i)});
        if(!camlBack){return r;}; let f=r.slice(0,1); r=r.slice(1); return (f.toLowerCase()+r);
    });

    hard(function isLowerCase(v){return (v===lowerCase(v));});
    hard(function isUpperCase(v){return (v===upperCase(v));});
    hard(function isProprCase(v){return (v===proprCase(v));});
    hard(function isCamelCase(v,cb){return (v===camelCase(v,cb));});
// ----------------------------------------------------------------------------------------------------------------------------




// func :: escapeHtml : sanitise text for safer HTML rendering
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function escapeHtml(text)
    {
        if(!isText(text)){return text};

        var map = // object
        {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#039;",
        };

        return text.replace(/[&<>"']/g, function(m){return map[m];});
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: test : test a string against some Regex pattern
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function test(v,x)
    {
        if(((typeof v)!="string")||(v.length<1)){return FALS}; if(!x){return};
        if((typeof x)=="string"){if(wrapOf(x)!=="//"){return}; x=(new RegExp(x));}; if(!x){return};
        if(x.constructor&&(x.constructor.name=="RegExp")){return (x.test(v)?TRUE:FALS)};
        if(isFunc(x)){return x(v)};
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: what : concise `typeof` .. returns 4-letter word, or undefined
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function what(v)
    {
        let l=("Void,Bool,Numr,Text,List,Knob,Func").split(",");
        for(let i in l){if(!l.hasOwnProperty(i)){continue}; if(MAIN[`is${l[i]}`](v)){return l[i].toLowerCase()}};
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: keys/vals : return a list of own-keys, or own-values of an object .. returns empty array if invalid
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function keys(o,x)
    {
        if(!isKnob(o)&&!isList(o)&&!isFunc(o)){return []}; // validation .. array is expected as return value
        let r=Object.getOwnPropertyNames(o); if(!isNumr(x)){return r}; // get properties .. return all
        if(x<0){x=((r.length-1)+x)}; return r[x];
    });

    hard(function vals(o,x)
    {
      let r=[]; keys(o).forEach((k)=>{r.push(o[k])});
      if(!isNumr(x)){return r}; if(x<0){x=((r.length-1)+x)};
      return r[x];
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: seen : returns the value of the first occurence in given context -or undefined .. if no x is given -MAIN is assumed
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function seen(f,x)
    {
        if(isVoid(x)&&isText(f,1)){return (new Function(`try{return ${f};}catch(e){};`))();}; // global / constant
        if(!x||(x===TRUE)||(f===VOID)){return}; // validation .. no search-able context, or trying to find `undefined`
        if(isNumr(x)){x=(x+""); if(isNumr(f)){f=(f+"");}}; // turn numbers into strings for searching
        if(!isFunc(x.indexOf)){x=keys(x);}; if(!x.length){return}; // validation
        if(!isList(f)){return ((x.indexOf(f)>-1)?f:VOID)}; // single search
        for(let i in f){if(!f.hasOwnProperty(i)){continue}; if(x.indexOf(f[i])>-1){return f[i]}}; // bulk search
    });

    hard(function isin(x,f){return seen(f,x)}); // syntax sugar .. reversed params for `seen`
// ----------------------------------------------------------------------------------------------------------------------------




// func :: mean : parse text into meaning
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function mean(v,km,vm, s,k,r)
    {
        if(!isText(v,1)){return};  let t=v.trim();  if(!t){return t}; v=VOID; // obvious stuff out the way
        try{let r=JSON.parse(t); return r}catch(e){}; // JSON does most of the heavy lifting
        if((t.startsWith("function ")||t.startsWith("("))&&(isin(t,["){",")=>",")\n"])&&isin(t,"}")))
        {
            r=(new Function("let f="+t+"\nreturn f"))();
            return r;
        };
        t=t.split(";").join("\n"); if(isin(t,"\n"))
        {
            r={}; t.split("\n").forEach((l)=>
            {
                let o=mean(l,km,vm); if(!isKnob(o)){r[span(r)]=o; return};
                k=keys(o)[0]; r[k]=o[k];
            });
            return r;
        };

        if(isin(t,['"',"`"])){return v}; // ignore multi-line or too complex
        s=part(t,":"); if(s)
        {k=trim(s[0]," "); if(isin(k,[" ",","])){return t}; if(km){k=km(k)}; v=mean(s[2]); if(vm){v=vm(v)}; return {[k]:v}};
        if(!isin(t,",")){return t}; // not a list
        r=[]; t.split(",").forEach((i)=>{r.radd(mean(i))});
        return r;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: text : parse meaning into text
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function text(v,w, r)
    {
        if((v===VOID)||isFunc(v)||isText(v)){return (v+"")};
        try{r=JSON.stringify(v);}catch(e){r=(v+"")};
        return (r||"");
    });
    hard(function textOf(v,w){return text(v,w)});
// ----------------------------------------------------------------------------------------------------------------------------




// func :: bool : parse implicit boolean
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function bool(x)
    {
        if(isBool(x)){return x}; if(span(x)<1){return FALS};
        if(isNumr(x)){return ((x<1)?FALS:TRUE)};

        if(isText(x))
        {
            x=lowerCase(trim(x)); if(!test(x,/[a-z0-1\+\-]{1,8}/)){return};
            if(isin(`+ 1 y ok yes true good okay positive`,x)){return TRUE};
            if(isin(`- 0 n no bad fals null false negative`,x)){return FALS};
            return;
        };

        if(isList(x)||isKnob(x)){return bool(vals(x)[0])};
        return;
    });
    hard(function boolOf(x){return bool(x)});
// ----------------------------------------------------------------------------------------------------------------------------




// func :: bore : get/set/rip keys of objects by dot -or slash delimiter
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function bore(o,k,v)
    {
        if(((typeof k)!='string')||(k.trim().length<1)||isin(k,"*")){return}; // invalid
        if(seen("/",k)&&!seen(".",k)){k=k.split("/").join(".")}; // slashes to dots
        let t=""; k.split(".").forEach((i)=>{t+=(!isNaN(i)?`[${i}]`:`.${i}`)}); k=t;
        if(v===VOID){return (new Function("a",`return a${k}`))(o)}; // get
        if(v===NULL){(new Function("a",`delete a.${k}`))(o); return TRUE}; // rip
        (new Function("a","z",`a.${k}=z`))(o,v); return TRUE; // set
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: rename : define/change the name of a function
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function rename(f,n)
    {
        let t,p,r; if(isText(f)){t=f; f=n; n=t}; // swap args
        if(((typeof f)!='function')||((typeof n)!='string')||(n.trim().length<1)){return}; // validate
        p=f.parted(); if(p.name){p.name=n}; t=p.toString(); r=(new Function("a",`return {[a]:${t}}[a];`))(n);
        return r;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: copyOf : duplicate .. if numr or text then n repeats n-times
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function copyOf(v,n, r)
    {
        if(isVoid(v)||(v===null)||(v==="")||isBool(v)){return v};
        if(isNumr(v)||isText(v)){if(!n){return v}; v=(v+''); n=parseInt(n); r=''; for(let i=0;i<n;i++){r+=v}; return r};
        if(((typeof Element)!=="undefined")&&(v instanceof Element)){return (v.cloneNode(true))};
        if(isList(v)){r=[]; v=([].slice.call(v)); v.forEach((i)=>{r.push(copyOf(i))}); return r};
        if(isFunc(v)){r=new Function('return ' + this.toString())(); this.forEach((v,k)=>{r[k]=copyOf(v)}); return r;};
        if(isKnob(v)){r={}; for(let k in v){if(!v.hasOwnProperty(k)){continue}; r[k]=copyOf(v[k])}; return r};
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: extend : define hardened properties -- neat shorthand to define multiple immutable properties of multiple targets
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function extend()
    {
        var a = [].slice.call(arguments);
        var z = function(d)
        {
            if(!isKnob(d)){return}; let r,o; r=TRUE; o={writable:FALS,enumerable:FALS,configurable:FALS,value:VOID};
            a.forEach((i)=>
            {
                if((("o,f").indexOf((typeof i)[0])<0)){r=FALS; moan("extend only words with objects and functions"); return};
                for(let p in d)
                {
                    if(!d.hasOwnProperty(p)){continue;}; let w,v,c,t,q; w=VOID; v=VOID; c=VOID; v=d[p]; t=(typeof v)[0];
                    if(!p.startsWith("hard ")&&!p.startsWith("soft ")){p=("hard "+p);}; // must be `hard` or `soft`
                    p=p.split(" "); w=p.shift(); p=p.pop().trim(); w=((w=="soft")?TRUE:FALS); // hard/soft determines writable
                    if(isin("o,f",t)){q=copyOf(o); q.value=p; Object.defineProperty(v,"name",q)};
                    c=copyOf(o); c.writable=w; c.value=v; try{Object.defineProperty(i,p,c)}catch(e){r=FALS;};
                };
                return r;
            });
        }; z.with=z;

        return z;
    });

    extend(Math)({name:'Math'});  extend(console)({name:'console'});
// ----------------------------------------------------------------------------------------------------------------------------




// func :: isConstructor : check if given arg is a constructor
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function isConstructor(f)
    {
        try{new f();}catch(e){if(e.message.indexOf('not a constructor')>=0){return FALS;}};
        return TRUE;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: listOf : convert into list
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function listOf(a)
    {
        if(isList(a))
        {
            if(!!a.forEach&&!!a.pop){return a};
            return ([].slice.call(a));
        };
        return [a];
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: pathOf : get path from string
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function pathOf(v)
   {
      if(!isText(v)){return}; let r=trim(v); if(!r){return}; if(isPath(r)){return r;}; if(r.startsWith("~")){return ("/"+r);};
      if(!isText(v,2)){return}; r=v; if(isin(r,'://')){r=r.split('://')[1]}; r=part(r,'/'); if(!r){return};
      r=('/'+r[2]); r=r.split('//').join('/'); r=r.split(' ').join('_'); r=r.split('?')[0];
      return (isPath(r)?r:VOID);
   });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: twig : get path from string - minus the last item after `/`
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function twig(v)
   {
       let r=pathOf(v); if(!r){return};
       return r.split("/").rpop(TRUE).join("/");
   });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: leaf : base-name from path
// ---------------------------------------------------------------------------------------------------------------------------------------------
   hard(function leaf(p)
   {
      let r=pathOf(p); if(!r){r=pathOf('/'+p); if(!r){return}}; let b=r.split('/').pop(); return b;
   });
// ---------------------------------------------------------------------------------------------------------------------------------------------




// func :: fext : get valid file extension from path
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function fext(p)
   {
      let r=pathOf(p); if(!r){r=pathOf('/'+p); if(!r){return}}; let b=r.split('/').pop();
      if(!isin(b,'.')){return}; r=b.split('.').pop();
      if(test(r,/^[a-zA-Z0-9]{1,8}$/)){return r};
   });
// ----------------------------------------------------------------------------------------------------------------------------




// shiv :: (wrap) : related to distinct first and last character pairs in text
// --------------------------------------------------------------------------------------------------------------------------------------------
   hard(function isWrap(v, r,l)
   {
      if(!isText(v,2)){return FALS}; r=(v.slice(0,1)+v.slice(-1)); l="\"\" '' `` {} [] () <> // :: \\\\ **".split(" ");
      return ((l.indexOf(r)<0)?FALS:r);
   });

   hard(function wrapOf(v, w){w=isWrap(v); return (w?w:'')});
   hard(function unwrap(v, w){w=isWrap(v); return (w?v.slice(1,-1):v)});
// --------------------------------------------------------------------------------------------------------------------------------------------




// func :: akin : check if needle is similar to hastack .. as in: "begins-with", "ends-with" or "contains" .. marked with `*`
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function akin(h,n, l,f,p,b,e)
   {
      if(!isText(h,1)||!isText(n,1)){return (h==n)}; if(n.indexOf("*")<0){return (h==n)}; // validate
      if(n.indexOf("**")>-1){if(n.startsWith('**')||n.endsWith("**")){return;}}; // validate
      if(n==="*"){return TRUE;}; if(n.length<2){return}; // for * or invalid
      if(wrapOf(n)==="**"){n=unwrap(n); return (h.indexOf(n)>-1)}; // contains
      if(n.startsWith("*")){n=ltrim(n,"*"); return h.endsWith(n);}; // ends-with
      if(n.slice(-1)==='*'){n=rtrim(n,"*"); return h.startsWith(n);}; // starts-with
      if(n.indexOf("**")<1){return FALS;}; p=n.split("**");
      b=akin(h,(p[0]+"*")); e=akin(h,("*"+p[1])); return (b&&e); // starts-&-ends-with
   });
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: time : returns seconds
// ----------------------------------------------------------------------------------------------------------------------------
   extend(MAIN)
   ({
      round:function round(n,d, r)
      {
         if(isList(n)){n.forEach((v,k)=>{n[k]=round(v,d)}); return n};
         if(!isNumr(n)){return}; if(isInum(n)){return n}; if(!d||!isInum(d)){return Math.round(n)}; r=n.toFixed(d); r=rtrim(rtrim(r,'0'),'.');
         r=(r*1); return r;
      },
      time:function time(d, r)
      {
         r=((isText(d)?Date.parse(d):Date.now()) / 1000);
         return (isInum(d)?round(r,d):Math.round(r));
      },
   });
// ----------------------------------------------------------------------------------------------------------------------------




// shiv :: (array) : tools for arrays
// ----------------------------------------------------------------------------------------------------------------------------
   extend(Array.prototype)
   ({
      ladd:function ladd(i){this.unshift(i); return this},
      radd:function radd(i){this[this.length]=i; return this},

      lpop:function lpop(n, r)
      {
          if(!n){r=this.shift(); return r;};
          if(n===TRUE){this.shift(); return this;};
      },
      rpop:function rpop(n, r)
      {
          if(!n){r=this.pop(); return r;};
          if(n===TRUE){this.pop(); return this;};
      },
      xpop:function xpop(f,n)
      {
          let x=this.indexOf(f); if(i > -1){this.splice(x,1)};
          return this;
      },

      item:function item(x){if(!isInum(x)){return}; if(x<0){x=(this.length+x)}; return this[x];},
      last:function last(i){let z=(this.length-1); if(i){return z}; return ((z<0)?VOID:this[z])},
   });

   const ladd = function ladd(a,i){a.ladd(i); return a};
   const radd = function radd(a,i){a.radd(i); return a};

   const lpop = function lpop(a,i){let r=a.lpop(); return r};
   const rpop = function rpop(a,i){let r=a.rpop(); return r};
   const xpop = function xpop(a,i){let r=a.xpop(); return r};

   const last = function last(a,i){let r=a.last(i); return r};

   const args = function args(a)
   {
       if(span(a)<1){return [];}; // void or empty
       if(!isList(a)){a=[a];}; // thing to arguments array
       if(isList(a[0])){a=a[0];}; // sub-arguments-array
       a=([].slice.call(a));
       return a;
   };
// ----------------------------------------------------------------------------------------------------------------------------




// shiv :: (array) : tools for objects
// ----------------------------------------------------------------------------------------------------------------------------
   extend(Object.prototype)
   ({
       forEach:function forEach(cb)
       {
           for(let k in this)
           {
               if(!this.hasOwnProperty(k)){continue};
               let r=cb.apply(this,[this[k],k]); if(r===STOP){break};
           };
       },
   });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: nodeName : of element
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function nodeName(o)
   {
      if(isNode(o)){return o.nodeName.toLowerCase()}; if(isKnob(o)){return keys(o)[0]};
   });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: fail : trigger error
// ----------------------------------------------------------------------------------------------------------------------------
    extend(MAIN)
    ({
        fail:function fail(m, a,n,f,l,s,p,o)
        {
           if(MAIN.HALT){return}; MAIN.HALT=1; if(MAIN.Busy){Busy.tint('red')}; tick.after(2000,()=>{MAIN.HALT=0});
           if(wrapOf(m)=="{}"){m=JSON.parse(m);};
           if(isText(m))
           {
               if(isin(m,"evnt: ")&&isin(m,"\nmesg: "))
               {
                   a=m.split("\n"); lpop(a); m=part(a[0],": ")[2]; n=part(m,' - ');
                   if(n&&isWord(n[0])){m=n[2];n=n[0]}else{n="Undefined"};
                   f=part(a[1],": ")[2]; l=part(a[2],": ")[2]; a=decode.jso(atob(part(a[3],": ")[2]));
                   s=[]; a.forEach((i)=>{radd(s,`${i.func} ${i.file} ${i.line}`)}); o={evnt:n,mesg:m,file:f,line:l,stak:s};
                   if(seenFail(o)){return}; emit("FAIL",o); return;
               };
               if(!isin(m,' :: ')){m=('Usage :: '+m);}; n=part(m,' :: '); m=n[2]; n=n[0]; s=stak(); p=(s[0]||"").split(" ");
               o={evnt:n,mesg:m,file:p[1],line:p[2],stak:s}; m=copyOf(o); moan(o);
               if(seenFail(o)){return}; emit("FAIL",o); return;
           };
           if(!isKnob(m)){console.error(m); alert("an error has occurred, me scuzi"); return};
           m.evnt=(m.evnt||m.name); if(!m.evnt){p=part(m.mesg," - "); if(p&&isWord(p[0])){m.evnt=p[0]; m.mesg=p[2]}};
           m.stak=(m.stak||stak());
           if(isKnob(m.stak[0])){s=[]; m.stak.forEach((i)=>{radd(s,`${i.func} ${i.file} ${i.line}`)}); m.stak=s};
           if(seenFail(m)){return}; emit("FAIL",m); return true;
       },

       seenFail:function seenFail(d, r)
       {
           d=md5(`${d.evnt}${d.mesg}${d.file}${d.line}`); r=(this.hash==d); this.hash=d; return r;
       }.bind({hash:""}),
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: jack : intercept class-constructors or methods
// ----------------------------------------------------------------------------------------------------------------------------
    const jack = function(k,v,x)
    {
        if(((typeof k)!='string')||!k.trim()){return}; // invalid reference
        if(!!v&&((typeof v)!='function')){return}; // invalid callback func
        if(!v){return this[k]}; // return existing definition, or undefined
        if(k in this){this[k].list[(this[k].list.length)]=v; return}; //add
        if(!x||((typeof x)!='object')){x=VOID}; //  validate once as object
        let h,n,c,f; h=k.split('.'); n=h.pop(); h=h.join('.'); //short vars
        this[k]={func:bore(MAIN,k),list:[v],evnt:x}; // callback definition
        h=(h?bore(MAIN,h):MAIN); c=isConstructor(this[k].func); //obj & con
        this[k].cons=c; bore(MAIN,k,null); //set cons & delete the original

        f=function()
        {
            let n,r,j,a,z,q; j='_fake_'; r=stak(0,j); r=(r||'').split(' ')[0];
            if(r.startsWith(j)||(r.indexOf(`.${j}`)>0)){n=(r.split(j).pop())};
            if(!n&&(r=='new')&&!!this.constructor){n=this.constructor.name;};
            if(!n){console.error(`can't jack "${r}"`);return}; r=jack(n);
            a=([].slice.call(arguments)); for(let p in r.list)
            {if(!r.list.hasOwnProperty(p)){continue}; let i=rename(j,r.list[p]);
            q=i.apply(this,a); if(q!=VOID){break};}; if(!Array.isArray(q)){q=[q]};
            try{if(!r.cons){z=r.func.apply(this,q)}else
            {z=(new (Function.prototype.bind.apply(r.func,[null].concat(a))));}}
            catch(e){if(!!r.evnt&&!!r.evnt.error){r.evnt.error(e)}
            else{console.error(e)};return}; if(!!r.evnt&&!!z.addEventListener)
            {for(let en in r.evnt){if(r.evnt.hasOwnProperty(en))
            {z.addEventListener(en,r.evnt[en],false)}}}; return z;
        };

        if(!c){f=rename(`_fake_${k}`,f)}; bake(h,n,f);
        try{h[n].prototype=Object.create(this[k].func.prototype)}catch(e){};
    }.bind({});

    bake(jack);

    hard(function hijack(l,f)
    {
        if(isList(l)){l.forEach((i)=>{jack(i,f)})};
        if(isKnob(l)){l.forEach((v,k)=>{jack(k,v)})};
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: stak : get call-stack .. returns array of text (per stack-item) .. should be compatible with all modern platforms
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function stak(x,a, e,s,r,h,o)
    {
        a=(a||""); e=(new Error(".")); s=e.stack.split("\n"); s.shift(); r=[];
        o=["_fake_"]; // omit
        s.forEach((i)=>
        {
            if((ENVITYPE=="web")&&(i.indexOf(HOSTPURL)<0)){return}; // web security
            let p,c,f,l,q; q=1; p=i.trim().split(HOSTPURL);
            c=p[0].split("@").join("").split("at ").join("").trim(); c=c.split(" ")[0]; if(!c){c="anon"};
            o.forEach((y)=>{if(((c.indexOf(y)==0)||(c.indexOf("."+y)>0))&&(a.indexOf(y)<0)){q=0}}); if(!q){return};
            p=(p[1]||p[0]).split(" "); f=p[0]; if(f.indexOf(":")>0){p=f.split(":"); f=p[0]}else{p=p.pop().split(":")};
            if((c=="stak")||(f=="/")){return}; l=p[1]; l=([c,f,l]).join(" "); if(l.indexOf(" at ")>-1){return};
            r[r.length]=l;
        });
        if(!isNaN(x*1)){return r[x]}; return r;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: enthen : syntax sugar & promise-er
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function enthen(obj,fnc)
    {
        if(!expect["knob,func"](obj)){return}; if(!expect.func(fnc)){return}; // validation
        if(!!obj.then&&!obj.then.enthen){moan("object.then is not undefined .. it will be replaced!",obj)}; // warning
        if(isFunc(fnc)&&!fnc.name){rename(fnc,"then")}; // give caller a name

        obj.assign({then:fnc}).then.assign({enthen:1});
        // obj.assign({then:fnc});
        tick.after(0,()=>{delete obj.then}); // now you see me
        return obj;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: herald : upgrade given object to listen `upon` and `emit` events in its own scope
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function herald(o)
    {
        if(!o){o={}}; // validate

        if(!o.upon)
        {
            extend(o)
            ({
                upon:function upon(en,cb,bl,dj)
                {
                    let me=(this||MAIN);
                    if(isKnob(en)){en.forEach((v,k)=>{me.upon(k,v)}); return me};
                    if(!me.upon.events[en]){me.upon.events[en]=[]}; me.upon.events[en].push(cb);
                    if(me.on&&!me.on.heralded){me.on(en,cb); return me};
                    if(me.addEventListener){me.addEventListener(en,cb,(bl?true:false)); return me};
                    return me;
                },
            });
            extend(o.upon)({events:{}});
        };

        if(!o.listen){extend(o)({listen:function listen(en,cb,bl){return this.upon(en,cb,bl)}})};
        if(!o.on){extend(o)({on:function on(en,cb,bl){return this.upon(en,cb,bl)}}); extend(o.on)({heralded:TRUE})};

        if(!o.when){extend(o)({when:function when(en,bl)
        {
            if(!this){fail("context issue .. `this` is undefined in heralded object.when"); return};
            enthen(this,function(cb){return this.upon(en,cb,bl)});
            return this;
        }})};


        // if(!!o.emit)
        // {
        //     let ae=o.emit.revise((obj)=>
        //     {
        //         obj.body.ladd(`enthen(this);`);
        //         obj.body[obj.body.last(1)]=`return this;`;
        //         return obj;
        //     });
        //     bake("emit",ae,o,1);
        // };


        if(!o.emit){extend(o)({emit:function emit(en,ev)
        {
            let me=(this||MAIN);
            if(me.dispatchEvent){me.dispatchEvent((new CustomEvent(en,{detail:ev})))}
            else{(me.upon.events[en]||[]).forEach((cb)=>{cb.apply(me,[{detail:ev}])})};
            enthen(me,function(cb){cb.apply(this,[]); return this}); return me;
        }})};

        if(!o.signal){extend(o)({signal:function signal(en,ev){return this.emit(en,ev)}})};

        if(!o.hush){extend(o)({hush:function hush(en,ev)
        {
            let me=(this||MAIN); if(!me.upon.events[en]){return me};
            if(!ev){delete me.upon.events[en]; return me};
            if(me.removeListener){me.removeEventListener(en,ev)};
            me.upon.events[en].xpop(ev); return me;
        }})};

        if(!o.revoke){extend(o)({revoke:function revoke(en,ev){return this.hush(en,ev)}})};

        return o;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: tick : nice syntax for setTimeout and setInterval
// ----------------------------------------------------------------------------------------------------------------------------
    extend(MAIN)
    ({
        tick:
        {
            after:function after(frst,scnd)
            {
                if(isFrac(frst)){frst=Math.floor(frst*1000)}; // fraction to seconds
                if(!isFunc(scnd)){moan("2nd arg must be a function"); return}; // validation

                if(isNumr(frst)){let timr=setTimeout(scnd,frst); return timr}; // simple timeout
                if(isFunc(frst)&&isFunc(scnd)){scnd(frst());}; // syntax sugar
            },


            every:function every(frst,scnd,slow,lmit)
            {
                if(isFrac(frst)){frst=Math.floor(frst*1000)}; // fraction to seconds
                if(!isFunc(scnd)){moan("2nd arg must be a function"); return}; // validation
                if(!isInum(slow)||(slow<0)){slow=0}; if(!isInum(lmit)||(lmit<0)){lmit=null}; // normalize to prevent issues

                if(isNumr(frst))
                {
                    lmit=slow; if(!lmit){return setInterval(scnd,frst)}; // simple interval
                    let timr=setInterval(()=>{scnd(); lmit--; if(lmit<0){clearInterval(timr)};},frst);
                    return timr;
                };

                if(isFunc(frst)&&isFunc(scnd))
                {
                    let timr=setInterval(()=>
                    {
                        if(lmit!==null){lmit--; if(lmit<0){clearInterval(timr); return}};
                        let resl=frst(); if(resl||(resl===0)){scnd(resl)};
                    },slow);
                    return timr;
                };
            },


            until:function until(frst,scnd,slow,lmit)
            {
                if(!isFunc(frst)){fail("1st arg must be a function"); return}; // validation
                if(!isFunc(scnd)){fail("2nd arg must be a function"); return}; // validation
                if(!isInum(slow)||(slow<0)){slow=0}; if(!isInum(lmit)||(lmit<0)){lmit=null};

                let timr=setInterval(()=>
                {
                    if(lmit!==null){lmit--; if(lmit<0){clearInterval(timr); return}};
                    let resl=frst(); if(resl||(resl===0)){clearInterval(timr); scnd(resl);};
                },slow);
                return timr;
            },
        },


        after:function after(a){return function runAfter(b){return tick.after(a,b);}},
        every:function every(a,s,l){return function runEvery(b){return tick.every(a,b,s,l);}},
        until:function until(a,s,l){return function runUntil(b){return tick.until(a,b,s,l);}},

        when:function when(a){return {then:function then(b)
        {
            if(isWord(a)){return upon(a,b)};
            return tick.until(a,b);
        }}},
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: trap : neat Proxy
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function trap(trgt,nick)
    {
        if(isText(trgt)){nick=trgt; trgt=(seen(trgt)||function(){});}; // given string
        return function(o)
        {
            if(isFunc(o)){o={get:o,set:o,apply:o,construct:o}};
            let r=(new Proxy(trgt,o)); if(!isWord(nick)){return r};
            extend(MAIN)({[nick]:r}); return r;
        };
    });

    extend(Object.prototype,Function.prototype)
    ({
        trap:function trap(o)
        {
            if(isFunc(o)){o={get:o,set:o,apply:o,construct:o}};
            if(!isKnob(o)){moan("invalid argument"); return}; // validation
            return (new Proxy(this,o));
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: expect : for validation .. usage: expect.bool(123); // throws error because 123 is not boolean
// ----------------------------------------------------------------------------------------------------------------------------
    trap("expect")
    ({
        get:function(o,k)
        {
            return function(v,c)
            {
                let gvn,exp,r,m,e; r=FALS; m=""; e="";

                if(k=="envi")
                {
                    if(!isin("web,ext,njs",v)){moan("wrong ENVITYPE string given"); return}; if(ENVITYPE==v){return TRUE};
                    v=upperCase(v); fail(`environment :: expecting ${v} context`); return FALS;
                };

                if(k=="args")
                {
                    gvn=(v||{}); exp=(c||{}); if(!exp.forEach){return}; exp.forEach((v,k)=>
                    {
                        if(!isText(v,1)||e){return}; if(!v.indexOf(",")<0){v+=",0"};
                        let p,t,f,c,w; p=v.split(","); t=p[0]; f=seen('is'+proprCase(t)); c=(p[2]*1);
                        if(f&&f(gvn[k],c)){r=TRUE}else{r=FALS; e=`${k} as :${t}:`;}
                    });

                    if(r){return r}; if(c>0){m=` -which must contain ${c} item(s) or more`};
                    fail(`type :: expecting ${e}${m}`); return r;
                };

                k=k.split(' ').join(",").split(",");
                k.forEach((i)=>{let f=seen('is'+proprCase(i)); if(f&&f(v,c)){r=TRUE}});
                if(r){return r}; // no issues .. all is well
                k=k.join(', or '); if(isNumr(c)){m=` -which must contain ${c} item(s) or more`};
                fail('type :: expecting '+k+m);
            };
        },
        apply:function(o,x,a, r)
        {
            a=a[0]; if(!isKnob(a)){fail('calling `expect` directly requires an object');return}; r=true;
            a.forEach((v,k)=>{let f=seen('is'+proprCase(k)); if(f&&!f(v)){fail('type :: expecting '+k); r=false;}});
            return r;
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shiv :: md5 : hashing function .. usage: md5("whatever");
// ----------------------------------------------------------------------------------------------------------------------------
   !function(n){"use strict";function t(n,t){var r=(65535&n)+(65535&t);return(n>>16)+(t>>16)+(r>>16)<<16|65535&r}function r(n,t){return n<<t|n>>>32-t}function e(n,e,o,u,c,f){return t(r(t(t(e,n),t(u,f)),c),o)}function o(n,t,r,o,u,c,f){return e(t&r|~t&o,n,t,u,c,f)}function u(n,t,r,o,u,c,f){return e(t&o|r&~o,n,t,u,c,f)}function c(n,t,r,o,u,c,f){return e(t^r^o,n,t,u,c,f)}function f(n,t,r,o,u,c,f){return e(r^(t|~o),n,t,u,c,f)}function i(n,r){n[r>>5]|=128<<r%32,n[14+(r+64>>>9<<4)]=r;var e,i,a,d,h,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e<n.length;e+=16)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],7,-680876936),g,v,n[e+1],12,-389564586),l,g,n[e+2],17,606105819),m,l,n[e+3],22,-1044525330),v=o(v,m=o(m,l=o(l,g,v,m,n[e+4],7,-176418897),g,v,n[e+5],12,1200080426),l,g,n[e+6],17,-1473231341),m,l,n[e+7],22,-45705983),v=o(v,m=o(m,l=o(l,g,v,m,n[e+8],7,1770035416),g,v,n[e+9],12,-1958414417),l,g,n[e+10],17,-42063),m,l,n[e+11],22,-1990404162),v=o(v,m=o(m,l=o(l,g,v,m,n[e+12],7,1804603682),g,v,n[e+13],12,-40341101),l,g,n[e+14],17,-1502002290),m,l,n[e+15],22,1236535329),v=u(v,m=u(m,l=u(l,g,v,m,n[e+1],5,-165796510),g,v,n[e+6],9,-1069501632),l,g,n[e+11],14,643717713),m,l,n[e],20,-373897302),v=u(v,m=u(m,l=u(l,g,v,m,n[e+5],5,-701558691),g,v,n[e+10],9,38016083),l,g,n[e+15],14,-660478335),m,l,n[e+4],20,-405537848),v=u(v,m=u(m,l=u(l,g,v,m,n[e+9],5,568446438),g,v,n[e+14],9,-1019803690),l,g,n[e+3],14,-187363961),m,l,n[e+8],20,1163531501),v=u(v,m=u(m,l=u(l,g,v,m,n[e+13],5,-1444681467),g,v,n[e+2],9,-51403784),l,g,n[e+7],14,1735328473),m,l,n[e+12],20,-1926607734),v=c(v,m=c(m,l=c(l,g,v,m,n[e+5],4,-378558),g,v,n[e+8],11,-2022574463),l,g,n[e+11],16,1839030562),m,l,n[e+14],23,-35309556),v=c(v,m=c(m,l=c(l,g,v,m,n[e+1],4,-1530992060),g,v,n[e+4],11,1272893353),l,g,n[e+7],16,-155497632),m,l,n[e+10],23,-1094730640),v=c(v,m=c(m,l=c(l,g,v,m,n[e+13],4,681279174),g,v,n[e],11,-358537222),l,g,n[e+3],16,-722521979),m,l,n[e+6],23,76029189),v=c(v,m=c(m,l=c(l,g,v,m,n[e+9],4,-640364487),g,v,n[e+12],11,-421815835),l,g,n[e+15],16,530742520),m,l,n[e+2],23,-995338651),v=f(v,m=f(m,l=f(l,g,v,m,n[e],6,-198630844),g,v,n[e+7],10,1126891415),l,g,n[e+14],15,-1416354905),m,l,n[e+5],21,-57434055),v=f(v,m=f(m,l=f(l,g,v,m,n[e+12],6,1700485571),g,v,n[e+3],10,-1894986606),l,g,n[e+10],15,-1051523),m,l,n[e+1],21,-2054922799),v=f(v,m=f(m,l=f(l,g,v,m,n[e+8],6,1873313359),g,v,n[e+15],10,-30611744),l,g,n[e+6],15,-1560198380),m,l,n[e+13],21,1309151649),v=f(v,m=f(m,l=f(l,g,v,m,n[e+4],6,-145523070),g,v,n[e+11],10,-1120210379),l,g,n[e+2],15,718787259),m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);return[l,g,v,m]}function a(n){var t,r="",e=32*n.length;for(t=0;t<e;t+=8)r+=String.fromCharCode(n[t>>5]>>>t%32&255);return r}function d(n){var t,r=[];for(r[(n.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t<e;t+=8)r[t>>5]|=(255&n.charCodeAt(t/8))<<t%32;return r}function h(n){return a(i(d(n),8*n.length))}function l(n,t){var r,e,o=d(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length>16&&(o=i(o,8*n.length)),r=0;r<16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(d(t)),512+8*t.length),a(i(c.concat(e),640))}function g(n){var t,r,e="";for(r=0;r<n.length;r+=1)t=n.charCodeAt(r),e+="0123456789abcdef".charAt(t>>>4&15)+"0123456789abcdef".charAt(15&t);return e}function v(n){return unescape(encodeURIComponent(n))}function m(n){return h(v(n))}function p(n){return g(m(n))}function s(n,t){return l(v(n),v(t))}function C(n,t){return g(s(n,t))}function A(n,t,r){return t?r?s(t,n):C(t,n):r?m(n):p(n)}"function"==typeof define&&define.amd?define(function(){return A}):"object"==typeof module&&module.exports?module.exports=A:n.md5=A; MAIN.md5=A}(MAIN); hard("md5",md5);
// ----------------------------------------------------------------------------------------------------------------------------




// shiv :: sha1 : hashing function .. usage: sha1("whatever");
// ----------------------------------------------------------------------------------------------------------------------------
   !function(){"use strict";function t(t){t?(f[0]=f[16]=f[1]=f[2]=f[3]=f[4]=f[5]=f[6]=f[7]=f[8]=f[9]=f[10]=f[11]=f[12]=f[13]=f[14]=f[15]=0,this.blocks=f):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],this.h0=1732584193,this.h1=4023233417,this.h2=2562383102,this.h3=271733878,this.h4=3285377520,this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0}var h="object"==typeof window?window:{},s=!h.JS_SHA1_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node;s&&(h=global);var i=!h.JS_SHA1_NO_COMMON_JS&&"object"==typeof module&&module.exports,e="function"==typeof define&&define.amd,r="0123456789abcdef".split(""),o=[-2147483648,8388608,32768,128],n=[24,16,8,0],a=["hex","array","digest","arrayBuffer"],f=[],u=function(h){return function(s){return new t(!0).update(s)[h]()}},c=function(){var h=u("hex");s&&(h=p(h)),h.create=function(){return new t},h.update=function(t){return h.create().update(t)};for(var i=0;i<a.length;++i){var e=a[i];h[e]=u(e)}return h},p=function(t){var h=eval("require('crypto')"),s=eval("require('buffer').Buffer"),i=function(i){if("string"==typeof i)return h.createHash("sha1").update(i,"utf8").digest("hex");if(i.constructor===ArrayBuffer)i=new Uint8Array(i);else if(void 0===i.length)return t(i);return h.createHash("sha1").update(new s(i)).digest("hex")};return i};t.prototype.update=function(t){if(!this.finalized){var s="string"!=typeof t;s&&t.constructor===h.ArrayBuffer&&(t=new Uint8Array(t));for(var i,e,r=0,o=t.length||0,a=this.blocks;r<o;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),s)for(e=this.start;r<o&&e<64;++r)a[e>>2]|=t[r]<<n[3&e++];else for(e=this.start;r<o&&e<64;++r)(i=t.charCodeAt(r))<128?a[e>>2]|=i<<n[3&e++]:i<2048?(a[e>>2]|=(192|i>>6)<<n[3&e++],a[e>>2]|=(128|63&i)<<n[3&e++]):i<55296||i>=57344?(a[e>>2]|=(224|i>>12)<<n[3&e++],a[e>>2]|=(128|i>>6&63)<<n[3&e++],a[e>>2]|=(128|63&i)<<n[3&e++]):(i=65536+((1023&i)<<10|1023&t.charCodeAt(++r)),a[e>>2]|=(240|i>>18)<<n[3&e++],a[e>>2]|=(128|i>>12&63)<<n[3&e++],a[e>>2]|=(128|i>>6&63)<<n[3&e++],a[e>>2]|=(128|63&i)<<n[3&e++]);this.lastByteIndex=e,this.bytes+=e-this.start,e>=64?(this.block=a[16],this.start=e-64,this.hash(),this.hashed=!0):this.start=e}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},t.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,h=this.lastByteIndex;t[16]=this.block,t[h>>2]|=o[3&h],this.block=t[16],h>=56&&(this.hashed||this.hash(),t[0]=this.block,t[16]=t[1]=t[2]=t[3]=t[4]=t[5]=t[6]=t[7]=t[8]=t[9]=t[10]=t[11]=t[12]=t[13]=t[14]=t[15]=0),t[14]=this.hBytes<<3|this.bytes>>>29,t[15]=this.bytes<<3,this.hash()}},t.prototype.hash=function(){var t,h,s=this.h0,i=this.h1,e=this.h2,r=this.h3,o=this.h4,n=this.blocks;for(t=16;t<80;++t)h=n[t-3]^n[t-8]^n[t-14]^n[t-16],n[t]=h<<1|h>>>31;for(t=0;t<20;t+=5)s=(h=(i=(h=(e=(h=(r=(h=(o=(h=s<<5|s>>>27)+(i&e|~i&r)+o+1518500249+n[t]<<0)<<5|o>>>27)+(s&(i=i<<30|i>>>2)|~s&e)+r+1518500249+n[t+1]<<0)<<5|r>>>27)+(o&(s=s<<30|s>>>2)|~o&i)+e+1518500249+n[t+2]<<0)<<5|e>>>27)+(r&(o=o<<30|o>>>2)|~r&s)+i+1518500249+n[t+3]<<0)<<5|i>>>27)+(e&(r=r<<30|r>>>2)|~e&o)+s+1518500249+n[t+4]<<0,e=e<<30|e>>>2;for(;t<40;t+=5)s=(h=(i=(h=(e=(h=(r=(h=(o=(h=s<<5|s>>>27)+(i^e^r)+o+1859775393+n[t]<<0)<<5|o>>>27)+(s^(i=i<<30|i>>>2)^e)+r+1859775393+n[t+1]<<0)<<5|r>>>27)+(o^(s=s<<30|s>>>2)^i)+e+1859775393+n[t+2]<<0)<<5|e>>>27)+(r^(o=o<<30|o>>>2)^s)+i+1859775393+n[t+3]<<0)<<5|i>>>27)+(e^(r=r<<30|r>>>2)^o)+s+1859775393+n[t+4]<<0,e=e<<30|e>>>2;for(;t<60;t+=5)s=(h=(i=(h=(e=(h=(r=(h=(o=(h=s<<5|s>>>27)+(i&e|i&r|e&r)+o-1894007588+n[t]<<0)<<5|o>>>27)+(s&(i=i<<30|i>>>2)|s&e|i&e)+r-1894007588+n[t+1]<<0)<<5|r>>>27)+(o&(s=s<<30|s>>>2)|o&i|s&i)+e-1894007588+n[t+2]<<0)<<5|e>>>27)+(r&(o=o<<30|o>>>2)|r&s|o&s)+i-1894007588+n[t+3]<<0)<<5|i>>>27)+(e&(r=r<<30|r>>>2)|e&o|r&o)+s-1894007588+n[t+4]<<0,e=e<<30|e>>>2;for(;t<80;t+=5)s=(h=(i=(h=(e=(h=(r=(h=(o=(h=s<<5|s>>>27)+(i^e^r)+o-899497514+n[t]<<0)<<5|o>>>27)+(s^(i=i<<30|i>>>2)^e)+r-899497514+n[t+1]<<0)<<5|r>>>27)+(o^(s=s<<30|s>>>2)^i)+e-899497514+n[t+2]<<0)<<5|e>>>27)+(r^(o=o<<30|o>>>2)^s)+i-899497514+n[t+3]<<0)<<5|i>>>27)+(e^(r=r<<30|r>>>2)^o)+s-899497514+n[t+4]<<0,e=e<<30|e>>>2;this.h0=this.h0+s<<0,this.h1=this.h1+i<<0,this.h2=this.h2+e<<0,this.h3=this.h3+r<<0,this.h4=this.h4+o<<0},t.prototype.hex=function(){this.finalize();var t=this.h0,h=this.h1,s=this.h2,i=this.h3,e=this.h4;return r[t>>28&15]+r[t>>24&15]+r[t>>20&15]+r[t>>16&15]+r[t>>12&15]+r[t>>8&15]+r[t>>4&15]+r[15&t]+r[h>>28&15]+r[h>>24&15]+r[h>>20&15]+r[h>>16&15]+r[h>>12&15]+r[h>>8&15]+r[h>>4&15]+r[15&h]+r[s>>28&15]+r[s>>24&15]+r[s>>20&15]+r[s>>16&15]+r[s>>12&15]+r[s>>8&15]+r[s>>4&15]+r[15&s]+r[i>>28&15]+r[i>>24&15]+r[i>>20&15]+r[i>>16&15]+r[i>>12&15]+r[i>>8&15]+r[i>>4&15]+r[15&i]+r[e>>28&15]+r[e>>24&15]+r[e>>20&15]+r[e>>16&15]+r[e>>12&15]+r[e>>8&15]+r[e>>4&15]+r[15&e]},t.prototype.toString=t.prototype.hex,t.prototype.digest=function(){this.finalize();var t=this.h0,h=this.h1,s=this.h2,i=this.h3,e=this.h4;return[t>>24&255,t>>16&255,t>>8&255,255&t,h>>24&255,h>>16&255,h>>8&255,255&h,s>>24&255,s>>16&255,s>>8&255,255&s,i>>24&255,i>>16&255,i>>8&255,255&i,e>>24&255,e>>16&255,e>>8&255,255&e]},t.prototype.array=t.prototype.digest,t.prototype.arrayBuffer=function(){this.finalize();var t=new ArrayBuffer(20),h=new DataView(t);return h.setUint32(0,this.h0),h.setUint32(4,this.h1),h.setUint32(8,this.h2),h.setUint32(12,this.h3),h.setUint32(16,this.h4),t};var y=c();i?module.exports=y:(h.sha1=y,e&&define(function(){return y})); MAIN.sha1=y}(); hard("sha1",sha1);
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: performance.now : for server side
// ----------------------------------------------------------------------------------------------------------------------------
    if(SERVERSIDE)
    {
        extend(MAIN)({performance:{now: function now(bgn)
        {
            if (!bgn){return process.hrtime()};
            var end = process.hrtime(bgn);
            return Math.round((end[0]*1000) + (end[1]/1000000));
        }}});
    };
// ----------------------------------------------------------------------------------------------------------------------------




// func :: expose : returns a list of items found in string wrapped inside string-pair
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function expose(t,b,e,x)
   {
      if(!isText(t,1)||!isText(b,1)||!isText(e,1)||(t.indexOf(b)<0)||(t.indexOf(e)<0)){return};  // validate
      let r,ml,xb,xe,xs,bl,el; bl=b.length; el=e.length; ml=(bl+el); if(t.length<(ml+1)){return}; r=[];
      do
      {
         xb=t.indexOf(b); if(xb<0){break}; xe=t.indexOf(e,(xb+bl)); if(xe<0){break};
         xs=t.slice((xb+bl),xe); if(!x||test(xs,x)){r.push(xs); t=t.slice((xe+el));}else{t=t.slice(xe);};
      }
      while((t.length>ml)&&(xb>-1)&&(xe>-1))
      return ((r.length>0)?r:VOID);
   });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: hash : make a hash of any value .. `f` is expected as function -or hash-algorithm-name as function
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function hash(v,f)
   {
      v=((v!==VOID)?text(v):(performance.now()+''+(Math.random().toString(36).slice(2,12))));
      if(!f){f="md5"}; if(isWord(f)){f=seen(f)}; if(!expect.func(f)){return};
      return f(v);
   });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: swap : replace substrings .. yes it's a bit slower than [whatever], but it's handy and has no "issues"
// ----------------------------------------------------------------------------------------------------------------------------
   hard(function swap(s,f,r)
   {
      if(!isText(s)){return}; if(isNumr(f)){f=(f+'')}; if(isNumr(r)){r=(r+'')}; // normalize
      if(isText(f)&&isText(r)){s=s.split(f).join(r); return s}; // all text
      if(isList(f)&&isText(r)){f.forEach((i,x)=>{s=s.split(i).join(r);}); return s}; // list of things to find & replace with r
      if(isList(f)&&isList(r)){f.forEach((i,x)=>{s=s.split(i).join(r[x]);}); return s}; // find & replace in order of f & r
      return s;
   });

   extend(String.prototype)
   ({
       swap:function swap(f,r){return MAIN.swap(this,f,r);}, // to use like: "whatever".swap("ever","what"); // whatwhat
   });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: reckon : calculate simple expressions in text .. works with mesurement-units too
// ----------------------------------------------------------------------------------------------------------------------------
    const reckon = function(txt,vrs, wrp,lst,opk,prt,lft,opr,rgt,rsl,tmp)
    {
        txt=trim(txt); if(!isText(txt,3)){return}; if(!isKnob(vrs)){vrs={}};
        opk=keys(this); wrp=wrapOf(txt); if(wrp=="()"){txt=unwrap(txt);};

        prt=part(txt,opk); if(!prt){return}; lft=mean(prt[0]); opr=prt[1]; rgt=mean(prt[2]); if(!this[opr]){return};
        if(!isNaN(lft)){lft*=1}; if(!isNaN(rgt)){rgt*=1}; let l,o,r;
        if(isText(lft)){l=bore(vrs,lft)}; if(l!=VOID){lft=l};
        if(isText(rgt)){r=bore(vrs,rgt)}; if(r!=VOID){rgt=r};

        tmp=part(rgt,opk); if(!tmp){rsl=this[opr](lft,rgt); return rsl;};
        return rsl;
    }
    .bind
    ({
        ' <= ':function(l,r){return (l<=r);},
        ' >= ':function(l,r){return (l>=r);},
        ' ~ ':function(l,r){return (isin(l,"*")?akin(r,l):akin(l,r));},
        ' = ':function(l,r){return (l===r);},
        ' + ':function(l,r){return (l+r);},
        ' - ':function(l,r){return (l-r);},
        ' / ':function(l,r){return (l/r);},
        ' % ':function(l,r){return (l%r);},
        ' < ':function(l,r){return (l<r);},
        ' > ':function(l,r){return (l>r);},
        ' | ':function(l,r){return (l||r);},
        ' & ':function(l,r){return (l&&r);},
        ' * ':function(l,r){return (l*r);},
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: (Object.indexOf) : find an object key like this: {foo:123}.indexOf(123); // foo
// ----------------------------------------------------------------------------------------------------------------------------
    extend(Object.prototype)
    ({
        indexOf:function indexOf(x)
        {
            let k,v,i; k=keys(this); v=vals(this); i=v.indexOf(x);
            if(i<0){return i}; return k[i];
        },

        join:function join(x)
        {
            if(span(keys(x))<1){return this};
            x.forEach((v,k)=>{this[k]=v});
            return this;
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: (Function.join) : extend function to access properties like `this.whatever` -even externally
// ----------------------------------------------------------------------------------------------------------------------------
    extend(Function.prototype)
    ({
        join:function join(o)
        {
            if(!expect.knob(o)){return};
            let r=this.bind(o); o.forEach((v,k)=>{r[k]=v});
            return r;
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// sham :: (Function.revise) : change how a function works in place .. meta-programming
// ----------------------------------------------------------------------------------------------------------------------------
    extend(Function.prototype)
    ({
        parted:function parted()
        {
            let txt,prt,nme,aro,arg,bdy,rsl; txt=this.toString(); prt=part(txt,"{");

            nme=prt[0].split("(")[0].trim(); aro=(nme?"":"=>");
            arg=prt[0].split(")")[0].split("(")[1].split(" ").join(""); arg=(arg?arg.split(","):[]);
            bdy=rpart(prt[2],"}")[0].trim(); bdy=(bdy?bdy.split("\n"):[]);  rsl={name:nme,args:arg,arro:aro,body:bdy};

            rsl.toString=function()
            {
                let rsl=(this.name+"("+this.args.join(",")+")"+this.arro+"\n{\n"+this.body.join("\n")+"\n};");
            }.bind(rsl);

            return rsl;
        },

        revise:function revise(fnc)
        {
            if(!expect.func(fnc)){return}; let rsl=this.parted().toString();
            return mean(rsl);
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: (Object.prototype) : CRUD functionality
// ----------------------------------------------------------------------------------------------------------------------------
    extend(Object.prototype)
    ({
        "soft update":function update(atr)
        {
            if(!expect.knob(atr)){return};
            let rsl,lst; rsl=copyOf(this); lst=keys(rsl);
            atr.forEach((v,k)=>{if(!isin(lst,k)){moan(`undefined key: ${k}`); return}; rsl[k]=v});
            return rsl;
        },

        "soft modify":function modify(atr)
        {
            if(!expect.knob(atr)){return};
            let rsl,lst; rsl={}; lst=keys(this);
            this.forEach((v,k)=>{if(!isin(lst,k)){moan(`undefined key: ${k}`); return}; rsl[(atr[k]||k)]=v});
            return rsl;
        },

        assign:function assign(obj)
        {
            if(!expect.knob(obj)){return};
            obj.forEach((v,k)=>{this[k]=v});
            return this;
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: (Array.prototype) : misc functionality
// ----------------------------------------------------------------------------------------------------------------------------
    extend(Array.prototype)
    ({
        assign:function assign(what)
        {
            let resl = {};  if(isKnob(what)){what=vals(what)};  if(!isList(what,1)){return this};
            what.forEach((name,indx)=>{resl[name]=this[indx]});
            return resl;
        },


        random:function random(num)
        {
            let a=copyOf(this);
            for (let i=(a.length-1); i>0; i--)
            {
                let j = Math.floor(Math.random()*(i+1));
                [a[i], a[j]] = [a[j], a[i]];
            }

            if(!isInum(num)||(num<1)){return ((num<1)?[]:a)};
            return a.slice(0,num);
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: (Array.prototype) : CRUD functionality
// ----------------------------------------------------------------------------------------------------------------------------
    extend(Array.prototype)
    ({
        insert:function insert(opt)
        {
            if((this.length>1)&&!expect.data(this)){return}; // CRUD validation
            let okl,nkl,rsl; rsl=true;

            if(isList(opt))
            {
                if(!expect.data(opt)){return}; // validation
                okl=keys(this[0]); opt.forEach((row)=>
                {
                    if(!rsl){return}; // failed before
                    if(okl!==keys(row)){rsl=false; fail("column missmatch"); return};
                    this.radd(row);
                });
                return rsl;
            };
        },



        select:function select(opt)
        {
            if((this.length>1)&&!expect.data(this)){return}; // CRUD validation
            if(isin(["*",UNIQUE,COPIES],opt)){opt=((opt=="*")?{fetch:"*"}:{fetch:"*",where:opt});};
            if(!expect.knob(opt,1)){return []}; // SELECT validation

            if(isText(opt.fetch)&&(wrapOf(opt.fetch)!="::")&&isin(opt.fetch,[":"," ",","]))
            {opt.fetch=(isin(opt.fetch,": ")?opt.fetch:mean(opt.fetch.swap(" ","\n")));};
            if(isWord(opt.fetch)){opt.fetch={[opt.fetch]:opt.fetch};};

            if(isList(opt.fetch)){opt.fetch=opt.fetch.assign(opt.fetch);};
            if(isText(opt.order)){opt.order=trim(opt.order); if(!isin(opt.order,":")){opt.order+=":ASC"}};

            let rsl=[];  let dne=0;  let uni={};  for(let k in this)
            {
                if(!this.hasOwnProperty(k)){continue};
                let add,itm,tmp,lst,val,hsh,spn; add={}; itm=this[k];

                if(opt.fetch=="*"){add=itm}
                else if(isKnob(opt.fetch))
                {
                    if(!isKnob(itm)){itm={value:itm};}; lst=keys(itm);
                    opt.fetch.forEach((v,k)=>
                    {
                        val=bore(itm,k); if(val!=VOID){add[v]=val};
                    });
                };

                if(isText(opt.where,1))
                {
                    if(opt.where==UNIQUE)
                    {
                        spn=span(add); hsh=hash((spn>0)?add:itm);
                        if(uni[hsh]){continue}; add=((spn>0)?add:itm); uni[hsh]=1;
                    }
                    else if(opt.where==COPIES)
                    {
                        spn=span(add); hsh=hash((spn>0)?add:itm);
                        if(uni[hsh]){add=((spn>0)?add:itm)}else{add={}}; uni[hsh]=1;
                    }
                    else if(!reckon(opt.where,itm.join(add))){continue};
                };

                if(isFunc(opt.apply)){add=opt.apply(((span(add)>0)?add:itm),itm)};

                if(span(add)>0)
                {
                    dne++; rsl.radd(add);
                    if(isInum(opt.limit) && (dne>=opt.limit))
                    {break;};
                };
            };

            if(isText(opt.order,5))
            {
                let prt,col,ord,lst,bfr,ref; prt=opt.order.split(":"); col=prt[0]; ord=upperCase(prt[1]);
                lst=rsl; rsl=[]; bfr=[]; ref=[]; if(!isin("ASC,DSC",ord)){ord="ASC";};

                lst.forEach((obj,idx)=>
                {
                    let val=bore(obj,col); // get deep value by reference
                    if(val==VOID){moan(`undefined field: "${col}"`); return}; // invalid field-name
                    bfr.radd(val); ref.radd(val);
                });

                bfr=bfr.sort(); if(ord=="DSC"){bfr=bfr.reverse()};
                bfr.forEach((itm)=>{let oir=ref.indexOf(itm); rsl.radd(lst[oir]);});
            };

            return rsl;
        },



        "delete": function(opt) // `delete` is a reserved word, but this works
        {
            if((this.length>1)&&!expect.data(this)){return}; // CRUD validation
            if(!expect.knob(opt,1)){return}; // DELETE validation
            let rsl,dne; rsl=[]; dne=0; for(let k in this)
            {
                if(!this.hasOwnProperty(k)){continue};
                let row,tmp,add; row=this[k]; add=1;

                if(isText(opt.where,1) && reckon(opt.where,row)){add=0; dne++};

                if(add){rsl.radd(row)};
                if(isNumr(opt.limit)&&(dne>=opt.limit)){break};
            };

            return rsl;
        },



        update:function update(opt)
        {
            if((this.length>1)&&!expect.data(this)){return}; // CRUD validation
            if(!expect.knob(opt,1)){return}; // UPDATE validation

            let rsl,dne; rsl=[]; dne=0; for(let k in this)
            {
                if(!this.hasOwnProperty(k)){continue};
                let itm,row; itm=this[k]; row=VOID;

                if(isText(opt.where,1) && reckon(opt.where,row) && isKnob(opt.write))
                {row=itm.update(opt.write)};

                if(!row && isKnob(opt.write)){row=itm.update(opt.write)};

                if(!!row && isFunc(opt.apply)){row=opt.apply(row,itm)};

                if(isKnob(row)){rsl.radd(row); dne++}else{rsl.radd(itm)};
                if(isNumr(opt.limit)&&(dne>=opt.limit)){break};
            };

            return rsl;
        },



        modify:function modify(opt)
        {
            if(isFunc(opt))
            {
                let rsl=[]; this.forEach((v,k)=>{let r=opt.apply(this,[v,k]); if(r!==VOID){rsl.radd(r)}});
                return rsl;
            };

            if((this.length>1)&&!expect.data(this)){return}; // CRUD validation
            if(!expect.knob(opt,1)){return []}; // MODIFY validation

            if(isKnob(opt.alter))
            {
                let rsl=[]; this.forEach((row)=>
                {rsl.radd(row.modify(opt.alter));});

                return rsl; // TODO :: do not return here
            };
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: (libs) : misc tools
// ----------------------------------------------------------------------------------------------------------------------------
    if(SERVERSIDE)
    {
        hard("http",require("http"));
        hard("fsys",require("fs"));


        extend(fsys).with
        ({
            "soft rootPath": process.cwd(),

            dirIndex: function dirIndex(pth,cbf)
            {
                if(!expect.path(pth)){return}; let x;

                if(!isFunc(cbf))
                {
                    try{x = fsys.readdirSync(pth)}catch(e){return};
                    x=isin(DIRINDEX,x); return x;
                };

                fsys.readdir(pth,(err,lst)=>
                {
                    cbf(isList(lst)?isin(DIRINDEX,lst):err);
                });
            },
            dirIndexSync: function dirIndexSync(pth){return fsys.dirIndex(pth)},

            scandir: function scandir(pth,cbf)
            {
                if(!expect.path(pth)){return}; pth=rtrim(pth,"/"); let l,r; r={};

                if(!isFunc(cbf))
                {
                    try{l = fsys.readdirSync(pth)}catch(e){return};
                    l.forEach((i)=>{let p=(pth+"/"+i); r[i]=(isFold(p)?[]:"")});
                    return r;
                };

                fsys.readdir(pth,(err,lst)=>
                {
                    cbf(lst||err);
                });
            },
            scandirSync: function scandirSync(pth){return fsys.scandir(pth)},
        });


        hard(function btoa(arg)
        {return Buffer.from(arg).toString("base64");});

        hard(function atob(arg)
        {return Buffer.from(arg,"base64").toString();});
    }
    else
    {
        bake("http",
        {
            request:function request(opt,cbf, xhr)
            {
                if(isText(opt)){opt={target:opt};}; if(!isKnob(opt)){moan("invalid 1st argument"); return};
                if(!isKnob(opt.listen)){opt.listen={}}; if(isFunc(cbf)){opt.listen.loadend=cbf};
                xhr=(new XMLHttpRequest()); xhr.open((opt.method||"GET"),opt.target);
                opt.listen.forEach((v,k)=>{xhr.addEventListener(k,v)});
                if(isKnob(opt.header)){opt.header.forEach((v,k)=>{xhr.setRequestHeader(k,v)})};
                xhr.send((opt.convey?text(opt.convey):null));
            }
        });

        bake("fsys",
        {
            readFile:function readFile(pt,cb)
            {
                http.request(pt,function()
                {
                    let hd=mean(this.getAllResponseHeaders(),(k)=>{return camelCase(k,1)},(v)=>
                    {if(!isin(v,"=")){return v}; v=mean(v.swap(["=",","],[":",";"])); return v});
                    this.assign({path:pt}); cb(this.response,hd,this);
                });
            },
        });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: encode/decode : unified syntax for various encoding and decoding methods
// ----------------------------------------------------------------------------------------------------------------------------
    extend(MAIN)
    ({
        encode:
        {
            blo:function(arg1,type)
            {
                if(isList(arg1)||isText(arg1))
                {
                    var resl = (new Blob([arg1],{type:(type||'text/plain')}));
                    return resl;
                };

                if(isKnob(arg1)&&(isText(arg1.mime)||isText(arg1.type))&&!!arg1.data)
                {
                    let l,s,a,r; s=arg1.data.length; l=(new Array(s));
                    for(let i=0; i<s; i++){l[i]=arg1.data.charCodeAt(i)};
                    a=(new Uint8Array(l)); r=(new Blob([a],{type:trim(arg1.mime)}));
                    return r;
                };
            },

            jso:function jso(what)
            {
                let resl=VOID; try{resl=JSON.stringify(what)}catch(e){};
                return resl;
            },

            b64:function b64(what)
            {
                let resl=VOID; try{resl=btoa(what)}catch(e){};
                return resl;
            },

            uri:function uri(what)
            {
                let resl=VOID; try{resl=encodeURIComponent(what)}catch(e){};
                return resl;
            },

            atr:function atr(o)
            {
                if(!isKnob(o)){return}; let r=[];
                o.forEach((v,k)=>{r.radd(`${k}="${v}"`)});
                r=r.join(" "); return r;
            },

            pty:function pty(o)
            {
                if(!isKnob(o)){return}; let r=[];
                o.forEach((v,k)=>{r.radd(`${k}: ${v}`)});
                r=r.join(";"); return r;
            },
        },


        decode:
        {
            blo:function blo(d,f)
            {
                if((d instanceof Blob)||(!!d&&isPath(`/${d.type}`)&&isInum(d.size)&&isInum(d.lastModified)))
                {
                    var p=(new FileReader()); p.onloadend=function(){f(p.result);};
                    p.readAsDataURL(d); return;
                };

                if(isKnob(d)&&(isText(d.mime)||isText(d.type)))
                {
                    let r=encode.BLOB(d.type);
                    if(!r){fail("Type :: invalid blob(ish) object"); return};
                    decode.BLOB(r,f); return;
                };

                fail("Args :: invalid 1st parameter");
            },

            jso:function jso(what)
            {
                let resl=VOID; try{resl=JSON.parse(what)}catch(e){};
                return resl;
            },

            b64:function b64(what)
            {
                let resl=VOID; try{resl=atob(what)}catch(e){};
                return resl;
            },

            uri:function uri(what)
            {
                let resl=VOID; try{resl=decodeURIComponent(what)}catch(e){};
                return resl;
            },

            atr:function atr(d)
            {
                if(isText(d)){d=d.trim()}; if(!isText(d,1)){return}; let l,r,k;
                l=d.split('\n').join(' '); l+=' '; l=swap(l,['   ','  '],' '); r={};
                l.split('" ').forEach((i)=>{i=i.trim().split('="'); k=trim(i[0]); if(!k){return}; let v=sval(i[1]); r[k]=v});
                return r;
            },

            pty:function pty(d)
            {
                return mean(d);
            },
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: vars : less smelly globals
// ----------------------------------------------------------------------------------------------------------------------------
    extend(Math)
    ({
        rand:function rand(min,max)
        {
            return Math.floor(Math.random()*(max-min+1)+min);
        },
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: wack : kick out hackers
// ----------------------------------------------------------------------------------------------------------------------------
    extend(MAIN)
    ({
        wack:function wack(arg)
        {
            let msg=decode.b64(this.msg).split("|");

            if(isList(arg))
            {msg=msg.concat(arg); this.msg=encode.b64(msg.join("|")); return TRUE;}; // added messages

            msg=msg.random(1); if(arg){return msg}; // return message instead of wacking
            if(SERVERSIDE){moan(msg); return}; // .. may be handy some time
            moan("forbidden"); HEAD.innerHTML=""; BODY.innerHTML=msg;
        }
        .bind
        ({
            msg:"aW5zZXJ0IDUwYyBhbmQgdHJ5IGFnYWlufHN0b3AgYnJlYWtpbmcgc2ghdHxiZXR0ZXIgbHVjayBuZXh0IHRpbWV8b2theSBmaW5lLCB5b3Ugd2lufHRoYW5rIHlvdSBnZW5pdXMsIG5vdyBpdCdzIGJyb2tlbnxoYXZpbmcgZnVuP3xkb2VzIHRoaXMgbWFrZSB5b3UgaGFwcHk/fG5leHQgc3RvcDogSG9nd2FydHN8T2gsIHNheSEgY2FuIHlvdSBzZWUsIGJ5IHRoZSBkYXduJ3MgZWFybHkgbGlnaHQsIHRoYXQgeW91J3JlIHdhc3RpbmcgeW91ciB0aW1lfHlvdSBnb3R0YSBhc2sgeW91cnNlbGY6ICJkbyBJIGZlZWwgbHVja3k/Inx0aGlzIGlzIGFib3V0IGFzIGV4Y2l0aW5nIGFzIHdhdGNoaW5nIHdvcm1zIHByb2NyZWF0ZXx5b3UgZGlkIGl0ISBvaCBoYWlsIHRoZSBkZXN0cm95ZXIhIGJyaW5nZXIgb2YgYm9yZWRvbXx3b3VsZCB5b3UgbGlrZSBmcmllcyB3aXRoIHRoYXQ/",
        }),
    });
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: vars : less smelly globals .. denies access if not authorized by: function-name AND file-path
// ----------------------------------------------------------------------------------------------------------------------------
    extend(MAIN)
    ({
        vars:function vars(arg,alo)
        {
            let frm=stak(0); if(!frm){wack(); return};
            frm=frm.split(" "); frm.pop();

            if(isText(arg))
            {
                arg=trim(arg); if(!expect.text(arg,1)){return};
                if(!isin(keys(this),arg)){return}; // undefined
                let obj=this[arg]; if(!isin(obj.auth,frm)){wack(); return};
                return obj.data;
            };

            if(!expect.knob(arg,1)){return}; if(isText(alo,1)){alo=[alo];};

            arg.forEach((v,k)=>
            {
                if(!isin(keys(this),k)){this[k]={auth:(alo||[]).ladd(frm),data:v}; return};
                if(!isin(this[k].auth,frm)){wack(); return STOP};
                if(alo&&!isin(this[k].auth,alo)){this[k].auth.radd(alow)};
                this[k].data=v;
            });
        }
        .bind({}),
    });
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: file : disk tools
// ----------------------------------------------------------------------------------------------------------------------------
    trap("disk")({get:function(tgt,key,val)
    {
        if(!isFunc(fsys[key])){return tgt[key];};
        return function()
        {
            let a,k,r,z; a=listOf(arguments); k=this.k; z=last(a);
            if(isPath(a[0])&&!a[0].startsWith(".")){a[0]=("."+a[0])};
            if(!isFunc(z)){k+="Sync"};
            return fsys[k].apply(fsys,a);
        }.bind({k:rtrim(key,"Sync")});
    }});

    extend(disk)
    ({
        "soft rootPath": (fsys.rootPath),
    });
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: server : for server and client
// ----------------------------------------------------------------------------------------------------------------------------
    extend(MAIN)
    ({
        server:
        {
            config:
            {
                mimeType:mean(decode.b64(`M2dwIDogdmlkZW8vM2dwcAphdSA6IGF1ZGlvL2Jhc2ljCmF2aSA6IHZpZGVvL3gtbXN2aWRlbwpiaW4gOiBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0KYm1wIDogaW1hZ2UvYm1wCmNydCA6IGFwcGxpY2F0aW9uL3gteDUwOS1jYS1jZXJ0CmNzcyA6IHRleHQvY3NzCmNzdiA6IHRleHQvY3N2CmZvbGQgOiBpbm9kZS9kaXJlY3RvcnkKZmlsZSA6IGZpbGUvdW5rbm93bgpub25lIDogbm9uZS91bmRlZmluZWQKZmxhYyA6IGF1ZGlvL3gtZmxhYwpmbnQgOiB0ZXh0L2NzcwpnaWYgOiBpbWFnZS9naWYKaHRtIDogdGV4dC9odG1sCmh0bWwgOiB0ZXh0L2h0bWwKaWNvIDogaW1hZ2UveC1pY29uCmljcyA6IHRleHQvY2FsZW5kYXIKaW1nIDogaW1hZ2UvcG5nCmluZiA6IHRleHQvcGxhaW4KaXNvIDogYXBwbGljYXRpb24veC1pc285NjYwLWltYWdlCmphciA6IGFwcGxpY2F0aW9uL2phdmEtYXJjaGl2ZQpqcGVnIDogaW1hZ2UvanBlZwpqcGcgOiBpbWFnZS9qcGVnCmpzIDogYXBwbGljYXRpb24vamF2YXNjcmlwdApqc20gOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0CmpzbyA6IGFwcGxpY2F0aW9uL2pzb24KanNvbiA6IGFwcGxpY2F0aW9uL2pzb24KbWQgOiB0ZXh0L3gtbWFya2Rvd24KbWt2IDogdmlkZW8veC1tYXRyb3NrYQptb2JpIDogYXBwbGljYXRpb24veC1tb2JpcG9ja2V0LWVib29rCm1wMyA6IGF1ZGlvL21wZWcKbXA0IDogdmlkZW8vbXA0Cm1wZWcgOiB2aWRlby9tcGVnCm9nYSA6IGF1ZGlvL29nZwpvZ2cgOiBhdWRpby9vZ2cKb2d2IDogdmlkZW8vb2dnCm9neCA6IGFwcGxpY2F0aW9uL29nZwpvdGYgOiBhcHBsaWNhdGlvbi94LWZvbnQtb3RmCnBkZiA6IGFwcGxpY2F0aW9uL3BkZgpwbmcgOiBpbWFnZS9wbmcKcGhwIDogYXBwbGljYXRpb24veC1odHRwZC1waHAKc2RiIDogYXBwbGljYXRpb24vZGF0YWJhc2UKc25kIDogYXVkaW8vb2dnCnNxbCA6IGFwcGxpY2F0aW9uL3NxbApzdmcgOiBpbWFnZS9zdmcreG1sCnN2Z3ogOiBpbWFnZS9zdmcreG1sCnN3ZiA6IGFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoCnR0ZiA6IGFwcGxpY2F0aW9uL3gtZm9udC10dGYKdHh0IDogdGV4dC9wbGFpbgp1cmkgOiB0ZXh0L3VyaS1saXN0CnVybCA6IHBsdWcvbGluawp2bXAgOiB0ZXh0L3ZhbXAKdmNmIDogdGV4dC94LXZjYXJkCnZjcyA6IHRleHQveC12Y2FsZW5kYXIKd2F2IDogYXVkaW8veC13YXYKd2ViYSA6IGF1ZGlvL3dlYm0Kd2VibSA6IHZpZGVvL3dlYm0Kd2VicCA6IGltYWdlL3dlYnAKd29mZiA6IGFwcGxpY2F0aW9uL2ZvbnQtd29mZgp3b2ZmMiA6IGFwcGxpY2F0aW9uL2ZvbnQtd29mZjIKeG1sIDogYXBwbGljYXRpb24veG1sCnppcCA6IGFwcGxpY2F0aW9uL3ppcAp3ZWJtYW5pZmVzdCA6IGFwcGxpY2F0aW9uL2pzb24=`)),

                botMatch: mean(`bot,crawl,fetch,find,grab,scan,search,site,slurp,spider,wget,curl`),

                readDirs: FALS,

                reRoutes: {"/favicon.ico":"/view/favicon.ico"},

                authKeys:
                {
                    "127.0.0.1":hash(),
                },
            },


            create:function create(addr,path,indx)
            {
                if(!addr){addr="127.0.0.1"}; if(!path){path=""};

                let host = http.createServer(function(req,rsp)
                {
                    if(!!this.upon.events[req.method]){return}; // already handled

                    let rp,np,mt,fd,tv; rp=process.cwd(); np=(rtrim(req.url,"/")||"/"); tv=server.config.reRoutes[np];
                    if(isInum(tv,3)&&(tv!=200)){rsp.writeHead(tv); rsp.end(); return}; if(isPath(tv)){np=tv}; tv=VOID;
                    if(np=="/"){np=(indx||(np+disk.dirIndex(process.cwd())))};
                    if(!np.startsWith(path)){np=(path+np)}; let dr; dr=0;

                    if(!disk.exists(np)){rsp.writeHead(404); rsp.end(); return}; // undefined

                    if(req.method=="GET")
                    {
                        if(isFold(np)){dr=1; tv=(indx||disk.dirIndex(np)); if(tv){np+=tv; dr=0}};

                        if(!dr)
                        {
                            mt=server.config.mimeType[fext(np)];  fd=disk.readFile(np);  rsp.statusCode=200;
                            rsp.setHeader("Content-type",(mt||"text/plain")); rsp.end(fd);
                            return;
                        };

                        if(!server.config.readDirs){rsp.writeHead(403); rsp.end(); return}; // forbidden
                        dr=disk.readdir(np); rsp.statusCode=200; rsp.setHeader("Content-type","application/json");
                        rsp.end(text(dr)); return;
                    };

                    rsp.writeHead(405); rsp.end();
                });

                extend(host)({path:path,addr:(addr+"")}); addr=addr.split(":"); if(!addr[1]){addr[1]=2592};
                host.listen(addr[1],addr[0]); herald(host);

                dump(`\nhttp server running .. http://${addr[0]}:${addr[1]}\n`);
                return host;
            },


            select:function select(opt,cbf)
            {
                if(isPath(opt)){opt={using:opt}}; if(!isKnob(opt)){moan("1st arg is invalid"); return};
                if(isFunc(cbf)){opt.yield=cbf}; if(!isFunc(opt.yield)){moan("invalid options/arguments"); return};
                disk.readFile(opt.using,function(rsp,hdr)
                {
                    if(isFunc(opt.apply)){rsp=opt.apply(rsp,hdr);};
                    opt.yield(rsp,hdr);
                });
            },
        }
    });
// ----------------------------------------------------------------------------------------------------------------------------




// func :: requires : load & run files
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function load()
    {
        var arg,cbf,rsl,dne,thn; arg=args(arguments); cbf=rpop(arg);
        if(!isFunc(cbf)){arg.radd(cbf); cbf=VOID}; // no callback as last arg .. add it back
        rsl=[]; dne=[0,span(arg)];

        thn=function then()
        {
            return this.then.apply(null,args(arguments));
        }.join({then:function then(tfa)
        {
            if(isFunc(tfa)){this.done=tfa; return};
            if(isFunc(this.done)){this.done.apply(this.done,args(arguments))};
        }.join({done:cbf})});

        arg.forEach((pth)=>
        {
            let fun,ext; ext=fext(pathOf(pth));
            fun=function(wut){dne[0]++; rsl.radd(wut||this); if(dne[0]==dne[1]){tick.after(0,()=>{thn.apply(thn,rsl)})}};

            if(SERVERSIDE)
            {
                if(ext=="js"){fun(require(pth)); return};
                if(ext=="json"){fun(decode.jso(disk.readFile(pth))); return};
                fun(disk.readFile(pth)); return;
            };

            if(!render.handle[ext]){fail(`missing handler for "${ext}"`); return STOP};
            let dja=select(`[src="${pth}"]`); if(dja){fun(dja[0]); return};
            render.handle[ext](pth,(rsl)=>
            {
                if(isin("js,css",ext)){HEAD.insert(rsl);};
                fun(rsl);
            });
        });

        return thn;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// defn :: (dom-crud) : CRUD for the DOM .. runs clientSide
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE)
    {
        hard(function create(obj)
        {
            if(isWord(obj)){return document.createElement(obj)}; // done .. only text given as tag-name
            if(!expect.knob(obj,1)){return}; // validation
            let tmp,tag,def,ext,kds,rsl; tmp=keys(obj); tag=tmp[0]; def=obj[tag]; delete obj[tag]; // tag-name
            if(!isText(def)||(isText(def)&&!def.startsWith("#")&&!def.startsWith("."))){kds=def; def=VOID}; // quick-atr
            ext=isin(tmp,["$","contents","children"]); if(ext){kds=obj[ext]; delete obj[ext]}; // contents
            rsl=document.createElement(tag); if(!def&&!kds&&(span(obj)<1)){return rsl}; // done .. no attributes nor contents

            if(isText(def,2)){def.split(" ").forEach((d)=> // for quick attributes
            {
                let c=d.slice(0,1); d=d.slice(1); if((c=="#")){obj.id=d; obj.name=d}
                else if(c=="."){if(!obj.class){obj.class=""}; obj.class=obj.class.split(" ").radd(d).join(" ").trim()}});
            };

            rsl.modify(obj); if(kds){rsl.insert(kds)};
            return rsl;
        });


        hard(function select(def)
        {
            return document.documentElement.select(def);
        });


        hard(function remove()
        {
            return document.documentElement.remove.apply(document.documentElement,args(arguments));
        });


        extend(Element.prototype)
        ({
            lookup:function(c,n, r,w,s,d)
            {
                if(c=='^'){return this.parentNode}; if(c=='^^'){c='^',n=2}; d=["^","<",">"];
                if(c=='<'){return this.previousSibling}; if(c=='>'){return this.nextSibling}; if(!isText(c,1)){return};
                if((c=='<<')||(c=='>>')){r=this.parentNode; return (!r?VOID:((c=='<<')?r.firstElementChild:r.lastElementChild))};
                if(!isin(d,c)||!isInum(n)||(n<1)){return this}; s=rpart(c,d); if(s&&!isNaN(s[2])){n=s[2]}; n=(n*1);
                r=this; w=((c=='^')?'parentNode':((c=='<')?'previousSibling':'nextSibling'));
                while(n){n--; if(!!r[w]){r=r[w]}else{break}}; // find
                return r; // returns found-relative, or self if relative-not-found
            },

            select:function select(def)
            {
                if(!isText(def,1)){return}; let chr,qry,rsl,lst,tmp; chr=def.slice(0,1); qry="querySelectorAll"; rsl=[];
                if(isin("^<>",chr)){return this.lookup(def);}; // parents & siblings
                if(def=="*") // all children .. omit empty `#text` nodes
                {
                    listOf(this.childNodes).forEach((n)=>{if(((n.nodeName!='#text')||n.textContent.trim())){rsl.radd(n)}});
                    return rsl;
                };
                lst=this[qry](`:scope ${def}`);
                if((lst.length<1)&&(chr=='#')&&(def.indexOf(" ")<1)){def=def.slice(1); lst=this[qry](`:scope [name=${def}]`)};
                if(lst.length<1){return}; listOf(lst).forEach((n)=> // fixed querySelector bug
                {
                    if(isin(def,"[value=")){tmp=part(def,"=")[2]; tmp=unwrap(rpart(tmp,"]")[0]); if(n.value!=tmp){return}};
                    rsl.radd(n);
                });
                if(rsl.length<1){return}; if(chr=="#"){rsl=rsl[0]}; // implied
                return rsl;
            },

            modify:function modify(obj)
            {
                if(!expect.knob(obj)){return}; // validation
                obj.forEach((v,k)=>
                {
                    if(!isFunc(v)&&!isKnob(v)&&(k!='innerHTML')){this.setAttribute(k,v);}; // normal attribute
                    if(k=='class'){k='className'}; // prep attribute name for JS
                    this[k]=v; // set attribute as property -which possibly triggers some intrinsic JS event
                });
                return this;
            },

            insert:function insert(v)
            {
                if(v==VOID){return this}; let t=nodeName(this);
                if(isList(v)){var s=this; listOf(v).forEach((o)=>{s.insert(o)});return s}; // works with nodelist also
                if(t=='img'){return this}; // TODO :: impose?
                if(t=='input'){this.value=text(v); return this}; // form input text
                if(isNode(v)||isTemp(v)){this.appendChild(v); return this}; // normal DOM-node append
                if(isKnob(v)){let n=create(v); if(!isNode(n)){return this}; this.appendChild(n);return this}; //create & append
                if(isText(v)&&(wrapOf(trim(v))=='<>')){this.innerHTML=v; return this}; // insert as html
                if(!isText(v)){v=text(v);}; // convert any non-text to text .. circular, boolean, number, function, etc.
                if(isin(['code','text'],t)){this.textContent=v; return this;}; // insert as TEXT
                if(isin("style,script,pre,span,h1,h2,h3,h4,h5,h6,p,a,i,b",t)){this.innerHTML=v; return this}; // insert as HTML
                let n=create('span'); n.innerHTML=v; this.appendChild(n); return this; // append text as span
            },

            remove:function remove()
            {
                let a=args(arguments); a.forEach((d)=>
                {
                    if(isText(d)){d=this.select(d);}; if(!isList(d)){d=[d]};
                    d.forEach((n)=>{if(!isNode(n)){return}; n.parentNode.removeChild(n)});
                });
                return TRUE;
            },
        });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// defn :: (tools) : client-side
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE)
    {
        herald(MAIN); herald(document); herald(Element.prototype);


        extend(HTMLImageElement.prototype)
        ({
            toDataURL:function(m,q)
            {
                let c=document.createElement("canvas");
                c.width=this.naturalWidth; c.height=this.naturalHeight;
                c.getContext("2d").drawImage(this,0,0);
                c=c.toDataURL(m,q); return c;
            },
        });


        const copyToClipboard = str =>
        {
            let el=document.createElement("textarea"); el.value=str;
            el.setAttribute("readonly",""); el.style.position="absolute";
            el.style.left="-9999px"; BODY.appendChild(el); el.select();
            document.execCommand("copy"); BODY.removeChild(el);
        };
        bake(copyToClipboard);


        hard(function render(src,tgt,cbf)
        {
            if(isFunc(tgt)){cbf=tgt; tgt=VOID};
            if(!isNode(tgt)){tgt=BODY}; if(!isFunc(cbf)){cbf=function(){}}; tgt.innderHTML="";
            if(isPath(src)||isPurl(src))
            {
                let ext=fext(pathOf(src));
                if(!ext||!render.handle[ext]){fail(`missing handler for "${ext}" .. user render.modify()`); return};
                render.handle[ext](src,(rsl)=>{tgt.insert(rsl); cbf(rsl)});
                return;
            };
            src=create({div:src}).select("*"); tgt.insert(src); cbf(src);
        });

        extend(render)
        ({
            handle:
            {
                js:function js(src,cbf){cbf(create({script:"",src:src}));},
                css:function css(src,cbf){cbf(create({link:"",rel:"stylesheet",href:src}));},
                jpg:function jpg(src,cbf){cbf(create({img:"",src:src}));},
                png:function png(src,cbf){cbf(create({img:"",src:src}));},
                gif:function gif(src,cbf){cbf(create({img:"",src:src}));},
                txt:function txt(src,cbf){disk.readFile(src,(rsp)=>{cbf(create({pre:rsp}))});},
                htm:function htm(src,cbf){disk.readFile(src,(rsp)=>{cbf(create({div:rsp}).select("*"))});},
                html:function html(src,cbf){render.handle.htm(src,cbf);},
                jpeg:function jpeg(src,cbf){cbf(create({img:"",src:src}));},
                webp:function webp(src,cbf){cbf(create({img:"",src:src}));},
                json:function json(src,cbf){disk.readFile(src,(rsp)=>{cbf(decode.jso(rsp))});},
            },
            modify:function modify(obj)
            {
                extend(this.handle)(obj);
            },
        });

        extend(Element.prototype)
        ({
            render:function render(def,cbf)
            {
                MAIN.render(def,this,cbf);
            },
        });


        hard(function rect(a)
        {
            if(isText(a)){a=select(a)}; if(!isNode(a)){fail("reference :: expecting node or #nodeID");return};
            if(!a.parentNode){fail("lookup :: node is not attached to the DOM .. yet");return};
            let r=decode.jso(encode.jso(a.getBoundingClientRect())); r.forEach((v,k)=>{r[k]=Math.round(v)});
            return r;
        });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// defn :: (ornate) : client-side .. style
// ----------------------------------------------------------------------------------------------------------------------------
    hard(function ornate(arg,ctx)
    {
        if(isText(arg)&&(!ctx||isText(ctx)))
        {
            arg=trim(arg); if(span(arg)<6){return}; if(!isin(arg,"{")){arg=decode.b64(arg)};
            if(!ctx){ctx=("#ornate_"+hash())}; ctx=create({style:ctx,$:arg}); HEAD.insert(ctx);
            return ctx;
        };

        if(isNode(ctx)){ctx=[ctx]}; if(!isList(ctx)){moan("expecting list"); return};

        ctx.forEach((n)=>
        {
            if(!isNode(n)){moan("expecting list item as node"); return};
            if(isText(arg)){n.setAttribute("style",arg)}
            else if(isKnob(arg)){arg.forEach((v,k)=>{if(isNumr(v)&&!isin("zIndex,opacity",k)){v=(v+"px")}; n.style[k]=v})};
        });

        return TRUE;
    });
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: (Element.prototype) : enclan/declan .. add/remove classNames of an element
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE)
    {
       extend(Element.prototype)
       ({
          enclan:function()
          {
             let c,l,a,slf; slf=this; c=(slf.className||'').trim(); l=(c?c.split(' '):[]); a=args(arguments);
             a.forEach((v,k)=>{v=ltrim(v,'.'); if(!isin(l,v)){l.push(v);}});
             this.className=l.join(' ');
          },


          declan:function()
          {
             var c,l,a,x; c=(this.className||'').trim(); l=(c?c.split(' '):[]); a=listOf(arguments);
             a.forEach((i)=>{x=l.indexOf(ltrim(i,'.')); if(x>-1){l.splice(x,1)}}); this.className=l.join(' ');
          },


          reclan:function()
          {
             var a; a=listOf(arguments); a.forEach((i)=>
             {
                if(!isText(i)||!isin(i,':')){return}; let p=i.split(':'); let f=p[0].trim(); let t=p[1].trim();
                if(!f||!t){return}; this.declan(f); this.enclan(t);
             });
          },


          inclan:function()
          {
             var a,c,r; a=listOf(arguments); c=(this.className||'').trim(); r=FALS;
             a.forEach((i)=>{i=ltrim(i,'.'); if(isin(c),i){r=TRUE;return STOP}});
             return r;
          },


          enbool:function(w)
          {
             if(!isText(w,1)){return}; this[w]=true; this.setAttribute(w,w); this.enclan(w);
          },


          debool:function(w)
          {
             if(!isText(w,1)){return}; this[w]=false; this.removeAttribute(w); this.declan(w);
          },
       });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: (Element.prototype) : assort .. sort node placement order either by `sorted` (arg/parent), or `placed` of siblings
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE)
    {
       extend(Element.prototype)
       ({
          assort:function(r, f,w)
          {
             if(!r){r=this.sorted}; w=`assort rule: ${r}`; f=`invalid ${w}`;  let prts,slct,attr,ordr,indx,fltr;
             if(!isText(r,6)||!isin(r,"::")){fail(f);return}; prts=part(r,"::"); slct=trim(prts[0]);
             prts=part(trim(prts[2]),":"); if(!slct||!prts){return}; attr=trim(prts[0]); ordr=lowerCase(trim(prts[2]));
             if(!attr||!ordr){return}; slct=this.select(slct); if(!slct){return}; indx={};
             slct.forEach((n)=>{let a=bore(n,attr); if(isVoid(a)){return}; indx[a]=n; remove(n)});
             fltr=(keys(indx)).sort(); if(ordr=="dsc"){fltr.reverse()}; fltr.forEach((i)=>{this.appendChild(indx[i])});
          },
       });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: device : events
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE)
    {
        extend(MAIN)
        ({
            device:
            {
                vars:
                {
                    axis:{x:0,y:0}, btns:{}, busy:{}, last:{},
                },
                keyCombo:"",
                getCombo:function getCombo(how)
                {
                    this.keyCombo=keys(this.vars.btns).join(" ").trim();
                    if((how!=SILENT)&&isin(this.keyCombo," "))
                    {emit("KeyCombo",this.keyCombo); emit(this.keyCombo)};
                    return this.keyCombo;
                },
            },
        });

        MAIN.upon("mousemove",function(e)
        {
            let na,oa,en,be; be="MouseMove"; oa=device.vars.axis; na={x:e.clientX,y:e.clientY}; emit((be+"Any"),na);
            en=((na.x>oa.x)?"Rigt":((na.x<oa.x)?"Left":((na.y>oa.y)?"Down":((na.y<oa.y)?"Up":""))));
            if(!en){return}; en=(be+en); device.vars.axis=na; emit(en,na); device.vars.last="mouse";
            if(device.vars.busy.mouse){clearTimeout(device.vars.busy.mouse)}else{emit(be+"Begin")};
            device.vars.busy.mouse=tick.after(300,()=>
            {delete device.vars.busy.mouse; delete device.vars.btns[en]; emit(be+"End")});
        });

        MAIN.upon("wheel",function(me)
        {
            let x=(Math.round(me.deltaX)||0); let y=(Math.round(me.deltaY)||0); let ew,sw,sl,bx,xr,xd,xp,a;
            let d; if(!x){x=0;}; if(!y){y=0;}; if(me.deltaMode==1){x*=12; y*=12}; let eh,sh,st,el,yr,yd,yp,p;
            el=me.target; bx=rect(el); ew=bx.width; eh=bx.height; sw=el.scrollWidth; sh=el.scrollHeight;
            d=((sw>ew)?((x>0)?R:((x<0)?L:M)):((sh>eh)?((y>0)?D:((y<0)?U:M)):M)); let z;
            a=((d==M)?M:(((d==L)||(d==R))?X:Y)); sl=el.scrollLeft; st=el.scrollTop;
            p=round(((a==X)?((sl+ew)/sw):((st+eh)/sh)),1);
            z=round((a==M)?0:((a==X)?(sw-(sl+ew)):(sh-(st+eh)))); let crd=[x,y,d,a,p,z];

            emit("MouseWheel",crd); if(device.vars.busy.wheel){clearTimeout(device.vars.busy.wheel);}
            else{emit("WheelBegin",crd)}; device.vars.busy.wheel=tick.after(300,()=>
            {delete device.vars.busy.wheel; emit("WheelEnd",crd)});
        });

        MAIN.upon("mousedown",function(e)
        {
            let cb,en; cb=((e.which<2)?"Left":((e.which==2)?"Middle":"Right")); device.vars.last="mouse";
            en=(cb+"Click"); device.vars.btns[en]=1; device.getCombo(); let tap=(device.vars.taps||0); tap++;
            if((cb!="Left")||(tap<2)){emit(en); return}; device.vars.taps=tap;
            if(device.vars.busy.tap){clearTimeout(device.vars.busy.tap)};
            device.vars.busy.tap=tick.after(120,()=>
            {delete device.vars.busy.tap; delete device.vars.taps; emit("tap"+tap);});

        });

        MAIN.upon("mouseup",function(e)
        {
            let cb,en; cb=((e.which<2)?"Left":((e.which==2)?"Middle":"Right")); device.vars.last="mouse";
            en=("MouseUp"+cb); delete device.vars.btns[(cb+"Click")]; device.getCombo(SILENT); emit(en);
        });

        MAIN.upon("keydown",function(e)
        {
            let cb; cb=e.key; if(e.keyCode==91){cb="Meta";}else if(cb==" "){cb="Space"}; device.vars.last="keyboard";
            device.vars.btns[cb]=1; device.getCombo(); emit("KeyDown",cb);
        });

        MAIN.upon("keyup",function(e)
        {
            let cb; cb=e.key; if(e.keyCode==91){cb="Meta";}else if(cb==" "){cb="Space"}; device.vars.last="keyboard";
            delete device.vars.btns[cb]; device.getCombo(); emit("KeyUp",cb);
        });

        MAIN.upon("keypress",function(e)
        {
            let cb; cb=e.key; if(e.keyCode==91){cb="Meta";}else if(cb==" "){cb="Space"}; emit("KeyPress",cb);
             device.vars.last="keyboard"; if(e.repeat){emit("KeyRepeat",cb)};
            if(device.vars.busy.keyboard){clearTimeout(device.vars.busy.keyboard)}else{emit("TypingBegin")};
            device.vars.busy.keyboard=tick.after(300,()=>{delete device.vars.busy.keyboard; emit("TypingEnd")});
        });

        MAIN.upon("contextmenu",function(e)
        {
            if(device.vars.last=="mouse"){e.preventDefault(); return false;};
        });

        MAIN.upon("resize",function(e)
        {
            if(device.vars.busy.resize){clearTimeout(device.vars.busy.resize)}else{emit("ResizeBegin")};
            device.vars.busy.resize=tick.after(300,()=>{delete device.vars.busy.resize; emit("ResizeEnd")});
        });

        MAIN.upon("blur",function(e)
        {
            device.vars.btns={};
        });


        upon("load",()=>
        {
            if(seen("HEAD")){return}; // window.onload was triggered before
            defn({HEAD:document.head, BODY:document.body}); // global shorthands
            tick.after(10,()=>{emit("domReady")}); // DOM has fully loaded
            tick.after(90,()=>{emit("allReady")}); // ALL has fully loaded .. probably
        });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// sham :: THREE : three.js library .. https://github.com/mrdoob/three.js .. clone date: 2021-02-09 .. keep this updated!
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE)
    {
        upon("domReady",function()
        {
            (function(for_THREE_main)
            {
                HEAD.insert({script:`#THREE_main`,$:decode.b64(``)});
            }());

            (function(for_THREE_OrbitControls)
            {
                HEAD.insert({script:`#THREE_OrbitControls`,$:decode.b64(``)});
            }());

            (function(for_THREE_OBJLoader)
            {
                HEAD.insert({script:`#THREE_OBJLoader`,$:decode.b64(``)});
            }());

            // ======= KEEP THIS EXAMPLE HERE =======
            // (function(for_EXAMPLE)
            // {
            //     HEAD.insert({script:`#EXAMPLE_main`,$:decode.b64(``)});
            // }());
        });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// tool :: renderer : 3d helper tool
// ----------------------------------------------------------------------------------------------------------------------------
    class renderer
    {
        constructor(tgt)
        {
            if(!runsAt(CLIENT)){return};
            let tmp; this.assign({loaded:{OBJLoader:THREE.OBJLoader},halted:TRUE,driver:{},recent:{}});

            if(isKnob(tgt)&&!isNode(tgt)){tgt=create("div").modify(tgt)}
            else if(isText(tgt))
            {
                tgt=trim(tgt); if(!expect.text(tgt,1)){return}; try{tmp=select(tgt);}catch(e){};
                if(isNode(tmp)){tgt=tmp}else if(isList(tmp,1)){tgt=tmp[0]}
                else if(isWord(tgt)){tgt=create(tgt)}else{tgt=create({div:tgt})};
            };

            if(!expect.node(tgt)){return}; this.holder=tgt; // must be DOM node
            herald(this); return this.vivify();
        }


        deploy(tgt)
        {
            if(!expect.node(tgt)){return};
            if(!tgt.select("^")){fail("deploy target must exist in the DOM"); return};
            tgt.appendChild(this.holder);
            return this;
        }


        obtain(obj,dmp)
        {
            if(isPath(obj)){obj={[(leaf(obj).split(".")[0])]:obj}};
            if(!expect.knob(obj,1)){return}; this.recent.busy=1;
            var d,m; d=[0,span(obj)]; m={}; obj.forEach((v,k)=>
            {
                if(!expect.path(v)){return}; let mod,ext; mod=leaf(v).split(".")[0]; ext=fext(v);
                if(isin(this.loaded,mod)){d[0]++; return NEXT};

                if(isin("jpg,jpeg,png,gif,webp,svg,bmp",ext))
                {
                    this.loaded[k]=THREE.ImageUtils.loadTexture(v,{},()=>{d[0]++});
                    return NEXT;
                };

                if(isin("js,jsm",ext))
                {
                    disk.readFile(v,(txt,hdr,obj)=>
                    {
                        let frg; frg=`var ${mod} = (`; mod=leaf(obj.path).split(".")[0];
                        let vrs,arg; vrs = expose(txt,"import {","} from "); txt=trim(txt);
                        if(!isin(txt,frg)){moan(`expecting \`${frg}\``); d[1]--; return};
                        if(!vrs){moan(`expecting import vars`); d[1]--; return};

                        arg=swap(vrs[0].trim(),["\n","\t"," "],"").split(",");
                        vrs=arg.modify((i)=>{return (i+" = THREE."+i)});
                        arg=arg.join(","); vrs=(vrs.join(";\n")+";\n");
                        txt=txt.split(frg).pop(); txt=txt.split("\n").rpop(TRUE).join("\n");
                        txt=(`!(function(${arg})\n{\n${vrs}\n${frg+txt}\n\nTHREE.${mod}=${mod}; return ${mod};\n}());`);

                        if(dmp==DUMP){dump(btoa(txt))}; HEAD.insert({script:`#THREE_${mod}`,$:txt});
                        this.loaded[mod]=THREE[mod]; m[mod]=THREE[mod]; d[0]++;
                    });
                    return NEXT;
                };

                if(isin("obj",ext))
                {
                    // let man = new THREE.LoadingManager();
                    let ldr = new this.loaded.OBJLoader(); ldr.load(v,(o)=>
                    {
                        (function(s){s.loaded[this.mod]=o; m[this.mod]=o; d[0]++;}.bind({mod:mod})).apply(null,[this]);
                    });
                };
            });

            when(()=>{return (d[0]>=d[1])}).then(()=>{this.recent.busy=0; this.emit("loaded",this.loaded)});

            enthen(this,function(cbf){when(()=>{return (d[0]>=d[1])}).then(()=>{cbf.apply(this,[((span(m)<2)?vals(m)[0]:m)])})});
            // this.then.done=m;
            return this;
        }


        vivify(opt)
        {
            if(!expect.node(this.holder)){return};
            when(()=>{return ((this.holder.select("^")&&!this.recent.busy)?this.holder:VOID)}).
            then((tgt)=>
            {
                let box=rect(tgt.parentNode);
                let req={angle:45,ratio:(box.width/box.height),place:10000,speed:1};
                if(!isKnob(opt)){opt=req}else{opt.assign(req)};

                this.driver.scene = new THREE.Scene();
                this.driver.webgl = new THREE.WebGLRenderer();
                this.driver.camra = new THREE.PerspectiveCamera(opt.angle,opt.ratio,1,opt.place);
                this.driver.rayca = new THREE.Raycaster();
                this.driver.mouse = new THREE.Vector2();
                this.driver.cntrl = new THREE.OrbitControls(this.driver.camra,this.driver.webgl.domElement);

                this.driver.cntrl.zoomSpeed = opt.speed;
                this.driver.cntrl.target = (new THREE.Vector3(0,0,0));
                this.driver.camra.position.z = 1000;
                this.driver.webgl.setPixelRatio(window.devicePixelRatio);
                this.driver.webgl.setSize(box.width, box.height);

                tgt.appendChild(this.driver.webgl.domElement);


                this.driver.cntrl.addEventListener("change",(e)=>
                {
                    if(!this.isLive()){return}; // nothing to do .. prevents errors
                    if(this.recent.ctrl){this.recent.ctrl=0; return}; // this was us .. below

                    let num,bfr,pos,rot,dir; num=(this.recent.numr||0); num++; bfr=(this.recent.bufr||[]);

                    pos=round(vals(e.target.object.position).lpop(!0),12);
                    rot=round(vals(e.target.object.rotation).lpop(!0).rpop(!0).rpop(!0),12);
                    bfr.radd({pos:pos,rot:rot}); if(bfr.length>3){bfr.lpop()}; this.recent.bufr=bfr;

                    if(bfr.length<3){this.render(1); return}; // wait for 3 objects
                    if(bfr.select({fetch:"rot",where:UNIQUE}).length == 1)
                    {
                        if((bfr[0].pos[2]<bfr[1].pos[2])&&(bfr[1].pos[2]<bfr[2].pos[2])){dir="Bck"}
                        else if((bfr[0].pos[2]>bfr[1].pos[2])&&(bfr[1].pos[2]>bfr[2].pos[2])){dir="Fwd"};
                        if(dir){this.emit("CameraDolly",{direct:dir,buffer:bfr});};
                    }
                    else if(!dir)
                    {this.emit("CameraRotate",{buffer:bfr});};

                    this.render(EXCEPT);
                });

                upon("ResizeEnd",()=>{this.resync()});

                this.halted=FALS; this.resync(); this.render();
                this.emit("ready");
            });

            after(3000)(()=>{if(!this.isLive()){moan("the renderer holder is expected inside the DOM")}});
            return this;
        }


        isLive()
        {
            return ((!isNode(this.holder)||!this.holder.select("^")||this.halted)?FALS:TRUE);
        }


        pacify()
        {
            this.halted=TRUE;
            return this;
        }


        resync()
        {
            if(!this.isLive()){return}; let box=rect(this.holder.parentNode);
            this.driver.camra.aspect = (box.width/box.height);
            this.driver.camra.updateProjectionMatrix(); this.driver.webgl.setSize(box.width,box.height);
            this.render(); return this;
        }


        render(ctrl)
        {
            this.driver.mouse.x = ((device.vars.axis.x/window.innerWidth) * 2 - 1);
            this.driver.mouse.y = ((device.vars.axis.y/window.innerHeight) * 2 + 1);

            this.driver.rayca.setFromCamera(this.driver.mouse,this.driver.camra);
            if(ctrl!==EXCEPT){this.driver.cntrl.update()};
            this.driver.webgl.render(this.driver.scene,this.driver.camra);
        }


        create(arg)
        {
            if(!expect.args(arg,{using:"text,1",named:"text,1",yield:"text,1"})){return}; // validate
            let geo,mat,yld; geo=(new THREE[arg.basis]());
            mat=(new THREE[arg.using](arg.param)); yld=(new THREE[arg.yield](geo,mat));
            yld.name=arg.named; this.driver.scene.add(yld);
            this.render(); return this;
        }


        select(arg)
        {
            if(isText(arg,2)&&arg.startsWith("#"))
            {
                return this.driver.scene.getObjectByName(arg.slice(1));
            };
        }


        insert(arg)
        {
            if(isPath(arg))
            {
                this.obtain(arg).then((m)=>{this.driver.scene.add(m)});
                return this;
            };

            return this;
        }


        remove(arg)
        {
            let tgt=this.select(arg); if(!tgt){return this}; if(!isList(tgt)){tgt=[tgt]};
            tgt.forEach((i)=>{i.remove()}); this.render();
            return this;
        }
    }
// ----------------------------------------------------------------------------------------------------------------------------




// shim :: (Element.prototype.init3D) : 3d helper tool to bind it to an HTML node
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE)
    {
        extend(Element.prototype)
        ({
            init3D:function init3D(arg)
            {
                return (new renderer(arg)).deploy(this);
            }
        });
    };
// ----------------------------------------------------------------------------------------------------------------------------




// dcor :: (normalize) : normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css
// ----------------------------------------------------------------------------------------------------------------------------
    if(CLIENTSIDE){upon("domReady",function()
    {
        ornate(`aHRtbHtsaW5lLWhlaWdodDoxLjE1Oy13ZWJraXQtdGV4dC1zaXplLWFkanVzdDoxMDAlfWJvZHl7bWFyZ2luOjB9bWFpbntkaXNwbGF5OmJsb2NrfWgxe2ZvbnQtc2l6ZToyZW07bWFyZ2luOjAuNjdlbSAwfWhye2JveC1zaXppbmc6Y29udGVudC1ib3g7aGVpZ2h0OjA7b3ZlcmZsb3c6dmlzaWJsZX1wcmV7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLCBtb25vc3BhY2U7Zm9udC1zaXplOjFlbX1he2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9YWJiclt0aXRsZV17Ym9yZGVyLWJvdHRvbTpub25lO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSBkb3R0ZWR9YixzdHJvbmd7Zm9udC13ZWlnaHQ6Ym9sZGVyfWNvZGUsa2JkLHNhbXB7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLCBtb25vc3BhY2U7Zm9udC1zaXplOjFlbX1zbWFsbHtmb250LXNpemU6ODAlfXN1YixzdXB7Zm9udC1zaXplOjc1JTtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXN1Yntib3R0b206LTAuMjVlbX1zdXB7dG9wOi0wLjVlbX1pbWd7Ym9yZGVyLXN0eWxlOm5vbmV9YnV0dG9uLGlucHV0LG9wdGdyb3VwLHNlbGVjdCx0ZXh0YXJlYXtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZToxMDAlO2xpbmUtaGVpZ2h0OjEuMTU7bWFyZ2luOjB9YnV0dG9uLGlucHV0e292ZXJmbG93OnZpc2libGV9YnV0dG9uLHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfVt0eXBlPSJidXR0b24iXSxbdHlwZT0icmVzZXQiXSxbdHlwZT0ic3VibWl0Il0sYnV0dG9uey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b259W3R5cGU9ImJ1dHRvbiJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPSJyZXNldCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPSJzdWJtaXQiXTo6LW1vei1mb2N1cy1pbm5lcixidXR0b246Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyLXN0eWxlOm5vbmU7cGFkZGluZzowfVt0eXBlPSJidXR0b24iXTotbW96LWZvY3VzcmluZyxbdHlwZT0icmVzZXQiXTotbW96LWZvY3VzcmluZyxbdHlwZT0ic3VibWl0Il06LW1vei1mb2N1c3JpbmcsYnV0dG9uOi1tb3otZm9jdXNyaW5ne291dGxpbmU6MXB4IGRvdHRlZCBCdXR0b25UZXh0fWZpZWxkc2V0e3BhZGRpbmc6MC4zNWVtIDAuNzVlbSAwLjYyNWVtfWxlZ2VuZHtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29sb3I6aW5oZXJpdDtkaXNwbGF5OnRhYmxlO21heC13aWR0aDoxMDAlO3BhZGRpbmc6MDt3aGl0ZS1zcGFjZTpub3JtYWx9cHJvZ3Jlc3N7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9dGV4dGFyZWF7b3ZlcmZsb3c6YXV0b31bdHlwZT0iY2hlY2tib3giXSxbdHlwZT0icmFkaW8iXXtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowfVt0eXBlPSJudW1iZXIiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixbdHlwZT0ibnVtYmVyIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b257aGVpZ2h0OmF1dG99W3R5cGU9InNlYXJjaCJdey13ZWJraXQtYXBwZWFyYW5jZTp0ZXh0ZmllbGQ7b3V0bGluZS1vZmZzZXQ6LTJweH1bdHlwZT0ic2VhcmNoIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9Ojotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbnstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2ZvbnQ6aW5oZXJpdH1kZXRhaWxze2Rpc3BsYXk6YmxvY2t9c3VtbWFyeXtkaXNwbGF5Omxpc3QtaXRlbX10ZW1wbGF0ZXtkaXNwbGF5Om5vbmV9W2hpZGRlbl17ZGlzcGxheTpub25lfQ==`);

        // CSS fine-tuning :: border-box for all .. default bgcolor, font, fgcolor .. useful classes like .view & .layr
        ornate(`Kntib3gtc2l6aW5nOmJvcmRlci1ib3h9Ym9keSxodG1se2hlaWdodDoxMDAlfWJvZHl7YmFja2dyb3VuZDpoc2xhKDIxMCwzJSwxNiUsMSk7Zm9udC1mYW1pbHk6QXJpYWwsSGVsdmV0aWNhLHNhbnMtc2VyaWY7Y29sb3I6Izk5OX0udmlld3tkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmZpeGVkO3RvcDowO2xlZnQ6MDt6LWluZGV4OjEwMDAwMDA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0ubGF5cntkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt6LWluZGV4OjkwMDAwMDA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0=`);
    })};
// ----------------------------------------------------------------------------------------------------------------------------
